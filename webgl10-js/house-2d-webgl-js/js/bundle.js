import{mat4,vec3}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader));return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader));return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}class Renderable{constructor(x,y,w,h,color,startIndex,amountOfVertices,angle=0){this.x=x;this.y=y;this.w=w;this.h=h;this.color=color;this.startIndex=startIndex;this.amountOfVertices=amountOfVertices;this.angle=angle}}let uMvpMatrixLocation,uColorLocation;const modelMatrix=mat4.create();const mvpMatrix=mat4.create();const projMatrix=mat4.create();mat4.ortho(projMatrix,0,200,200,0,1,-1);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,1],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const housePosXElem=document.getElementById("housePosX");const housePosYElem=document.getElementById("housePosY");let housePosX=parseInt(housePosXElem.value);let housePosY=parseInt(housePosYElem.value);const houseBody=new Renderable(0,0,100,100,vec3.fromValues(0,.7,0),0,4);const roof=new Renderable(-10,0,50,50,vec3.fromValues(.35,.25,.2),4,4);const houseWindow=new Renderable(20,20,30,50,vec3.fromValues(0,0,0),0,4);const windowLine0=new Renderable(20,38,30,4,vec3.fromValues(1,1,1),0,4);const windowLine1=new Renderable(33,40,4,30,vec3.fromValues(1,1,1),0,4);const objects=[];objects.push(houseBody);objects.push(roof);objects.push(houseWindow);objects.push(windowLine0);objects.push(windowLine1);const applyButton=document.getElementById("applyButton");applyButton.onclick=()=>{housePosX=parseInt(housePosXElem.value);housePosY=parseInt(housePosYElem.value);draw()};function draw(){gl.clear(gl.COLOR_BUFFER_BIT);objects.forEach(obj=>{mat4.fromTranslation(modelMatrix,[housePosX+obj.x,housePosY+obj.y,0]);mat4.rotateZ(modelMatrix,modelMatrix,obj.angle*Math.PI/180);mat4.scale(modelMatrix,modelMatrix,[obj.w,obj.h,1]);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,obj.color);gl.drawArrays(gl.TRIANGLE_STRIP,obj.startIndex,obj.amountOfVertices)})}async function init(){if(!initWebGLContext("renderCanvas"))return;gl.clearColor(.77,.93,.95,1);const program=await createProgram("assets/shaders/","default.vert","default.frag");const vertPositions=[0,0,1,0,0,1,1,1,0,0,1.2,-1,2.4,0];const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const aPositionLocation=gl.getAttribLocation(program,"aPosition");gl.vertexAttribPointer(aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(aPositionLocation);uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");uColorLocation=gl.getUniformLocation(program,"uColor");draw()}init();