import{b2ContactListener,b2Vec2,b2World,b2PolygonShape,b2BodyType,DrawShapes}from"@box2d/core";import{mat4,vec3,quat}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}function getWindowWidth(){return Math.max(document.body.scrollWidth,document.documentElement.scrollWidth,document.body.offsetWidth,document.documentElement.offsetWidth,document.documentElement.clientWidth)}function getWindowHeight(){return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.documentElement.clientHeight)}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${vertShaderFileName}: ${gl.getShaderInfoLog(vShader)}`);return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(fShader,gl.COMPILE_STATUS);if(!ok){console.log(`${fragShaderFileName}: ${gl.getShaderInfoLog(fShader)}`);return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log(`Link error with shaders ${vertShaderFileName}`+` and ${fragShaderFileName}`);console.log(gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}function getSpriteInfo(atlasJson,spriteNames){const atlasW=atlasJson.meta.size.w;const atlasH=atlasJson.meta.size.h;const vertPositions=[];const texCoords=[];const spriteSizes=[];for(let i=0;i<spriteNames.length;i++){vertPositions.push(-.5,.5,-.5,-.5,.5,.5,.5,-.5);const tx=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["x"])/atlasW;const ty=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["y"])/atlasH;const tw=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"])/atlasW;const th=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"])/atlasH;texCoords.push(tx,ty,tx,ty+th,tx+tw,ty,tx+tw,ty+th);const spriteW=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"]);const spriteH=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"]);spriteSizes.push({w:spriteW,h:spriteH})}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoords),gl.STATIC_DRAW);const result={vertPosBuffer:vertPosBuffer,texCoordBuffer:texCoordBuffer,spriteSizes:spriteSizes};return result}function loadTexture(url,minType=gl.NEAREST,magType=gl.NEAREST){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magType);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}class ContactListener extends b2ContactListener{constructor(rocketHalfHeight,ballSpeed,pixelsPerMeter,scoreForLeftRacketElem,scoreForRightRacketElem,audioContext,beepAudioBuffer,decideAudioBuffer,plopAudioBuffer){super();this.rocketHalfHeight=rocketHalfHeight;this.ballSpeed=ballSpeed;this.pixelsPerMeter=pixelsPerMeter;this.scoreForLeftRacketElem=scoreForLeftRacketElem;this.scoreForRightRacketElem=scoreForRightRacketElem;this.scoreForLeftRacket=0;this.scoreForRightRacket=0;this.numberOfWinsForLeftRacket=0;this.numberOfWinsForRightRacket=0;this.audioContext=audioContext;this.beepAudioBuffer=beepAudioBuffer;this.decideAudioBuffer=decideAudioBuffer;this.plopAudioBuffer=plopAudioBuffer}play(audioBuffer,isLoop=false){const source=this.audioContext.createBufferSource();source.buffer=audioBuffer;source.loop=isLoop;const gain=this.audioContext.createGain();source.connect(gain).connect(this.audioContext.destination);gain.gain.value=.3;source.start();return source}hitFactor(ballPosY,racketPosY,rocketHalfHeight){return(ballPosY-racketPosY)/this.rocketHalfHeight}BeginContact(contact){const fixtureA=contact.GetFixtureA();const fixtureB=contact.GetFixtureB();const nameA=fixtureA.GetUserData().name;const nameB=fixtureB.GetUserData().name;let ballBody=null;if(nameA==="ball"||nameB==="ball"){if(nameA==="ball"){ballBody=fixtureA.GetBody()}else{ballBody=fixtureB.GetBody()}}const ballPosY=ballBody.GetPosition().y*this.pixelsPerMeter;if(nameA==="leftRacket"||nameB==="leftRacket"){this.play(this.plopAudioBuffer);let racketBody=null;if(nameA==="leftRacket"){racketBody=fixtureA.GetBody()}else{racketBody=fixtureB.GetBody()}const racketPosY=racketBody.GetPosition().y*this.pixelsPerMeter;const y=this.hitFactor(ballPosY,racketPosY,this.rocketHalfHeight);const dir=new b2Vec2(.5,y);dir.Normalize();ballBody.SetLinearVelocity(new b2Vec2(dir.x*this.ballSpeed,dir.y*this.ballSpeed))}if(nameA==="rightRacket"||nameB==="rightRacket"){this.play(this.plopAudioBuffer);let racketBody=null;if(nameA==="rightRacket"){racketBody=fixtureA.GetBody()}else{racketBody=fixtureB.GetBody()}const racketPosY=racketBody.GetPosition().y*this.pixelsPerMeter;const y=this.hitFactor(ballPosY,racketPosY,this.rocketHalfHeight);const dir=new b2Vec2(-.5,y);dir.Normalize();ballBody.SetLinearVelocity(new b2Vec2(dir.x*this.ballSpeed,dir.y*this.ballSpeed))}if(nameA==="leftTopWall"||nameB==="leftTopWall"||nameA==="leftBottomWall"||nameB==="leftBottomWall"||nameA==="rightTopWall"||nameB==="rightTopWall"||nameA==="rightBottomWall"||nameB==="rightBottomWall"){this.play(this.plopAudioBuffer);if(nameA==="ball"){ballBody=fixtureA.GetBody()}else{ballBody=fixtureB.GetBody()}const vel=ballBody.GetLinearVelocity();vel.x=-1*vel.x}if(nameA==="topWall"||nameB==="topWall"||nameA==="bottomWall"||nameB==="bottomWall"){this.play(this.plopAudioBuffer);if(nameA==="ball"){ballBody=fixtureA.GetBody()}else{ballBody=fixtureB.GetBody()}const vel=ballBody.GetLinearVelocity();vel.y=-1*vel.y}if(nameA==="leftPointTrigger"||nameB==="rightPointTrigger"||nameA==="rightPointTrigger"||nameB==="leftPointTrigger"){this.play(this.beepAudioBuffer);if(nameA==="ball"){ballBody=fixtureA.GetBody()}else{ballBody=fixtureB.GetBody()}if(nameA==="leftPointTrigger"||nameB==="leftPointTrigger"){this.scoreForRightRacket++;if(this.scoreForRightRacket>=10){this.play(this.decideAudioBuffer);this.numberOfWinsForRightRacket++;this.scoreForRightRacket=0;this.scoreForLeftRacket=0;this.scoreForLeftRacketElem.innerText=`${this.scoreForLeftRacket}/10 (${this.numberOfWinsForLeftRacket})`;this.scoreForLeftRacketElem.style.color="white"}this.scoreForRightRacketElem.innerText=`${this.scoreForRightRacket}/10 (${this.numberOfWinsForRightRacket})`;this.scoreForRightRacketElem.style.color="white";ballBody.SetLinearVelocity(new b2Vec2(this.ballSpeed,0))}else{this.scoreForLeftRacket++;if(this.scoreForLeftRacket>=10){this.play(this.decideAudioBuffer);this.numberOfWinsForLeftRacket++;this.scoreForLeftRacket=0;this.scoreForRightRacket=0;this.scoreForRightRacketElem.innerText=`${this.scoreForRightRacket}/10 (${this.numberOfWinsForRightRacket})`;this.scoreForRightRacketElem.style.color="white"}this.scoreForLeftRacketElem.innerText=`${this.scoreForLeftRacket}/10 (${this.numberOfWinsForLeftRacket})`;this.scoreForLeftRacketElem.style.color="white";ballBody.SetLinearVelocity(new b2Vec2(-this.ballSpeed,0))}setTimeout(()=>{ballBody.SetTransformXY(0,0,0)},0)}}}class DebugDrawer{constructor(program,pixelsPerMeter){this.program=program;this.pixelsPerMeter=pixelsPerMeter;gl.useProgram(program);const vertPositions=[-.5,-.5,.5,-.5,-.5,.5,.5,.5];this.vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null;this.lineWidth=.3;this.centerX=0;this.centerY=0;this.tempVec=vec3.create();this.fromX=0;this.fromY=0;this.toX=0;this.toY=0;this.length=0;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.create();this.color=vec3.create();this.unitX=vec3.fromValues(1,0,0);this.xf=vec3.create();this.radianOffset=0;this.quatMat=mat4.create();this.q=quat.create()}DrawSolidPolygon(vertices,vertexCount,color){gl.useProgram(this.program);gl.uniform3f(this.uColorLocation,color.r,color.g,color.b);gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);this.drawLine(vertices[0],vertices[1]);this.drawLine(vertices[1],vertices[2]);this.drawLine(vertices[2],vertices[3]);this.drawLine(vertices[3],vertices[0])}drawLine(pointA,pointB){this.fromX=pointA.x*this.pixelsPerMeter;this.fromY=pointA.y*this.pixelsPerMeter;this.toX=pointB.x*this.pixelsPerMeter;this.toY=pointB.y*this.pixelsPerMeter;if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}this.tempVec[0]=this.toX-this.fromX;this.tempVec[1]=this.toY-this.fromY;this.length=vec3.length(this.tempVec);vec3.normalize(this.tempVec,this.tempVec);this.position[0]=this.centerX;this.position[1]=this.centerY;this.position[2]=0;quat.rotationTo(this.rotation,this.unitX,this.tempVec);this.scale[0]=this.length;this.scale[1]=this.lineWidth;this.scale[2]=1;mat4.identity(this.modelMatrix);mat4.translate(this.modelMatrix,this.modelMatrix,this.xf);quat.identity(this.q);quat.rotateZ(this.q,this.q,this.radianOffset);mat4.fromQuat(this.quatMat,this.q);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.translate(this.modelMatrix,this.modelMatrix,this.position);mat4.fromQuat(this.quatMat,this.rotation);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.scale(this.modelMatrix,this.modelMatrix,this.scale);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}PushTransform(xf){this.xf[0]=xf.p.x*this.pixelsPerMeter;this.xf[1]=xf.p.y*this.pixelsPerMeter;this.radianOffset=xf.q.s}PopTransform(xf){}DrawPolygon(vertices,vertexCount,color){}DrawCircle(center,radius,color){}DrawSolidCircle(center,radius,axis,color){}DrawSegment(p1,p2,color){}DrawTransform(xf){}DrawPoint(p,size,color){}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}class Sprite{constructor(program,spriteNames,spriteInfo,texture){this.program=program;this.spriteNames=spriteNames;this.vertPosBuffer=spriteInfo.vertPosBuffer;this.texCoordBuffer=spriteInfo.texCoordBuffer;this.texture=texture;this.drawingIndex=0;this.spriteSizes=spriteInfo.spriteSizes;this.x=0;this.y=0;this.w=this.spriteSizes[0].w;this.h=this.spriteSizes[0].h;this.modelMatrix=mat4.create();this.mvpMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.aTexCoordLocation=gl.getAttribLocation(program,"aTexCoord");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix")}setPosition(x,y){this.x=x;this.y=y}setSize(w,h){this.w=w;this.h=h}setTextureRect(spriteName){const index=this.spriteNames.indexOf(spriteName);this.w=this.spriteSizes[index].w;this.h=this.spriteSizes[index].h;this.drawingIndex=index*4}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){gl.useProgram(this.program);this.bind();mat4.fromTranslation(this.modelMatrix,[this.x,this.y,0]);mat4.scale(this.modelMatrix,this.modelMatrix,[this.w,this.h,1]);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.useProgram(this.program);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,this.drawingIndex,4);gl.bindTexture(gl.TEXTURE_2D,null)}}const guiPanel=document.getElementById("guiPanel");async function init(){if(!initWebGLContext("renderCanvas")){return}gl.clearColor(0,0,0,1);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);const projMatrix=mat4.create();mat4.ortho(projMatrix,-30,30,-30,30,1,-1);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,1],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const colorProgram=await createProgram("assets/shaders/","color.vert","color.frag");const world=b2World.Create({x:0,y:0});const pixelsPerMeter=30;const debugDrawer=new DebugDrawer(colorProgram,pixelsPerMeter);debugDrawer.projViewMatrix=projViewMatrix;const textureProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");const texturePath="assets/sprites/texture.png";const texture=await loadTexture(texturePath);const textureResponse=await fetch("assets/sprites/texture.json");const textureContent=await textureResponse.text();const atlasJson=JSON.parse(textureContent);const spriteNames=["ball.png","dotted-line.png","wall-horizontal.png","wall-vertical.png","racket.png"];const spriteInfo=getSpriteInfo(atlasJson,spriteNames);const sprite=new Sprite(textureProgram,spriteNames,spriteInfo,texture);const leftPointTriggerShape=new b2PolygonShape;leftPointTriggerShape.SetAsBox(.5/pixelsPerMeter,8/pixelsPerMeter);const leftPointTriggerBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:-25.5/pixelsPerMeter,y:0/pixelsPerMeter}});const leftPointTriggerFixture=leftPointTriggerBody.CreateFixture({shape:leftPointTriggerShape});leftPointTriggerFixture.SetUserData({name:"leftPointTrigger"});const rightPointTriggerShape=new b2PolygonShape;rightPointTriggerShape.SetAsBox(.5/pixelsPerMeter,8/pixelsPerMeter);const rightPointTriggerBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:25.5/pixelsPerMeter,y:0/pixelsPerMeter}});const rightPointTriggerFixture=rightPointTriggerBody.CreateFixture({shape:rightPointTriggerShape});rightPointTriggerFixture.SetUserData({name:"rightPointTrigger"});const leftTopWallShape=new b2PolygonShape;leftTopWallShape.SetAsBox(.5/pixelsPerMeter,4/pixelsPerMeter);const leftTopWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:-24.5/pixelsPerMeter,y:12/pixelsPerMeter}});const leftTopWallFixture=leftTopWallBody.CreateFixture({shape:leftTopWallShape});leftTopWallFixture.SetUserData({name:"leftTopWall"});const leftBottomWallShape=new b2PolygonShape;leftBottomWallShape.SetAsBox(.5/pixelsPerMeter,4/pixelsPerMeter);const leftBottomWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:-24.5/pixelsPerMeter,y:-12/pixelsPerMeter}});const leftBottomWallFixture=leftBottomWallBody.CreateFixture({shape:leftBottomWallShape});leftBottomWallFixture.SetUserData({name:"leftBottomWall"});const rightTopWallShape=new b2PolygonShape;rightTopWallShape.SetAsBox(.5/pixelsPerMeter,4/pixelsPerMeter);const rightTopWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:24.5/pixelsPerMeter,y:12/pixelsPerMeter}});const rightTopWallFixture=rightTopWallBody.CreateFixture({shape:rightTopWallShape});rightTopWallFixture.SetUserData({name:"rightTopWall"});const rightBottomWallShape=new b2PolygonShape;rightBottomWallShape.SetAsBox(.5/pixelsPerMeter,4/pixelsPerMeter);const rightBottomWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:24.5/pixelsPerMeter,y:-12/pixelsPerMeter}});const rightBottomWallFixture=rightBottomWallBody.CreateFixture({shape:rightBottomWallShape});rightBottomWallFixture.SetUserData({name:"rightBottomWall"});const topWallShape=new b2PolygonShape;topWallShape.SetAsBox(25/pixelsPerMeter,.5/pixelsPerMeter);const topWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:0/pixelsPerMeter,y:16.5/pixelsPerMeter}});const topWallFixture=topWallBody.CreateFixture({shape:topWallShape});topWallFixture.SetUserData({name:"topWall"});const bottomWallShape=new b2PolygonShape;bottomWallShape.SetAsBox(25/pixelsPerMeter,.5/pixelsPerMeter);const bottomWallBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:0/pixelsPerMeter,y:-16.5/pixelsPerMeter}});const bottomWallFixture=bottomWallBody.CreateFixture({shape:bottomWallShape});bottomWallFixture.SetUserData({name:"bottomWall"});const leftRacketShape=new b2PolygonShape;leftRacketShape.SetAsBox(1/pixelsPerMeter,2/pixelsPerMeter);const leftRacketBody=world.CreateBody({type:b2BodyType.b2_kinematicBody,position:{x:-20/pixelsPerMeter,y:0/pixelsPerMeter}});const leftRacketFixture=leftRacketBody.CreateFixture({shape:leftRacketShape});leftRacketFixture.SetUserData({name:"leftRacket"});const rightRacketShape=new b2PolygonShape;rightRacketShape.SetAsBox(1/pixelsPerMeter,2/pixelsPerMeter);const rightRacketBody=world.CreateBody({type:b2BodyType.b2_kinematicBody,position:{x:20/pixelsPerMeter,y:0/pixelsPerMeter}});const rightRacketFixture=rightRacketBody.CreateFixture({shape:rightRacketShape});rightRacketFixture.SetUserData({name:"rightRacket"});const ballShape=new b2PolygonShape;ballShape.SetAsBox(.5/pixelsPerMeter,.5/pixelsPerMeter);const ballBody=world.CreateBody({type:b2BodyType.b2_dynamicBody,position:{x:0/pixelsPerMeter,y:0/pixelsPerMeter}});const ballFixture=ballBody.CreateFixture({shape:ballShape,density:1,friction:0,restitution:1});ballFixture.SetUserData({name:"ball"});ballBody.SetSleepingAllowed(false);ballBody.SetFixedRotation(true);const ballSpeed=1.5;ballBody.SetLinearVelocity(new b2Vec2(ballSpeed,0));let currentTime,lastTime,dt;const keyboard=new Keyboard;const scoreForLeftRacket=document.getElementById("scoreForLeftRacket");const scoreForRightRacket=document.getElementById("scoreForRightRacket");let beepResponse=await fetch("assets/sounds/ping_pong_8bit_beeep.ogg");const beepArrayBuffer=await beepResponse.arrayBuffer();let decideResponse=await fetch("assets/sounds/decidemp3-14575.mp3");const decideArrayBuffer=await decideResponse.arrayBuffer();let plopResponse=await fetch("assets/sounds/ping_pong_8bit_plop.ogg");const plopArrayBuffer=await plopResponse.arrayBuffer();async function run(){const audioContext=new window.AudioContext;const beepAudioBuffer=await audioContext.decodeAudioData(beepArrayBuffer);const decideAudioBuffer=await audioContext.decodeAudioData(decideArrayBuffer);const plopAudioBuffer=await audioContext.decodeAudioData(plopArrayBuffer);const rocketHalfHeight=Math.abs(rightRacketShape.m_vertices[0].y)*pixelsPerMeter;const contactListener=new ContactListener(rocketHalfHeight,ballSpeed,pixelsPerMeter,scoreForLeftRacket,scoreForRightRacket,audioContext,beepAudioBuffer,decideAudioBuffer,plopAudioBuffer);world.SetContactListener(contactListener);lastTime=Date.now();render()}function onBtnStart(){btnStart.hidden=true;checkBoxes.hidden=false;scores.hidden=false;run()}const controls=document.getElementById("controls");const btnStart=document.getElementById("btnStart");btnStart.onclick=onBtnStart;const tools=document.getElementById("tools");document.getElementById("sourceCode");const checkBoxes=document.getElementById("checkBoxes");const scores=document.getElementById("scores");const showCollidersCheckbox=document.getElementById("showCollidersCheckBox");let showColliders=showCollidersCheckbox.checked;showCollidersCheckbox.onchange=()=>{showColliders=showCollidersCheckbox.checked};const showSpritesCheckbox=document.getElementById("showSpritesCheckBox");let showSprites=showSpritesCheckbox.checked;showSpritesCheckbox.onchange=()=>{showSprites=showSpritesCheckbox.checked};window.onresize=()=>{const windowWidth=getWindowWidth();getWindowHeight();guiPanel.style.left=`${windowWidth/2-gl.canvas.width/2}px`;guiPanel.hidden=false;controls.hidden=false;tools.hidden=false;btnStart.style.left=`${gl.canvas.width/2-btnStart.clientWidth/2}px`;btnStart.style.top=`${gl.canvas.height/2-btnStart.clientHeight/2}px`};window.onresize(null);function render(){requestAnimationFrame(render);currentTime=Date.now();dt=(currentTime-lastTime)/1e3;lastTime=currentTime;if(keyboard.pressed("KeyW")){const x=leftRacketBody.GetPosition().x;let y=leftRacketBody.GetPosition().y;y=y+dt;if(y*pixelsPerMeter<14){leftRacketBody.SetTransformXY(x,y,0)}}if(keyboard.pressed("KeyS")){const x=leftRacketBody.GetPosition().x;let y=leftRacketBody.GetPosition().y;y=y-dt;if(y*pixelsPerMeter>-14){leftRacketBody.SetTransformXY(x,y,0)}}if(keyboard.pressed("ArrowUp")){const x=rightRacketBody.GetPosition().x;let y=rightRacketBody.GetPosition().y;y=y+dt;if(y*pixelsPerMeter<14){rightRacketBody.SetTransformXY(x,y,0)}}if(keyboard.pressed("ArrowDown")){const x=rightRacketBody.GetPosition().x;let y=rightRacketBody.GetPosition().y;y=y-dt;if(y*pixelsPerMeter>-14){rightRacketBody.SetTransformXY(x,y,0)}}world.Step(dt,{velocityIterations:3,positionIterations:2});gl.clear(gl.COLOR_BUFFER_BIT);if(showSprites){sprite.setTextureRect("dotted-line.png");sprite.setPosition(0,0);sprite.draw(projViewMatrix);sprite.setTextureRect("racket.png");sprite.setPosition(leftRacketBody.GetPosition().x*pixelsPerMeter,leftRacketBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix);sprite.setTextureRect("racket.png");sprite.setPosition(rightRacketBody.GetPosition().x*pixelsPerMeter,rightRacketBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix);sprite.setTextureRect("wall-horizontal.png");sprite.setPosition(bottomWallBody.GetPosition().x*pixelsPerMeter,bottomWallBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix);sprite.setTextureRect("wall-horizontal.png");sprite.setPosition(topWallBody.GetPosition().x*pixelsPerMeter,topWallBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix);sprite.setTextureRect("wall-vertical.png");sprite.setPosition(leftTopWallBody.GetPosition().x*pixelsPerMeter,leftTopWallBody.GetPosition().y*pixelsPerMeter);sprite.h=8;sprite.draw(projViewMatrix);sprite.setTextureRect("wall-vertical.png");sprite.setPosition(leftBottomWallBody.GetPosition().x*pixelsPerMeter,leftBottomWallBody.GetPosition().y*pixelsPerMeter);sprite.h=8;sprite.draw(projViewMatrix);sprite.setTextureRect("wall-vertical.png");sprite.setPosition(rightTopWallBody.GetPosition().x*pixelsPerMeter,rightTopWallBody.GetPosition().y*pixelsPerMeter);sprite.h=8;sprite.draw(projViewMatrix);sprite.setTextureRect("wall-vertical.png");sprite.setPosition(rightBottomWallBody.GetPosition().x*pixelsPerMeter,rightBottomWallBody.GetPosition().y*pixelsPerMeter);sprite.h=8;sprite.draw(projViewMatrix);sprite.setTextureRect("ball.png");sprite.setPosition(ballBody.GetPosition().x*pixelsPerMeter,ballBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix)}if(showColliders){DrawShapes(debugDrawer,world)}}}init();