import{mat4,vec3,quat}from"gl-matrix";import{b2World,b2Vec2,b2BodyType,b2PolygonShape,DrawShapes}from"@box2d/core";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}class DebugDrawer{constructor(program,pixelsPerMeter){this.program=program;this.pixelsPerMeter=pixelsPerMeter;this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projMatrix=null;this.viewMatrix=null;this.projViewMatrix=mat4.create();this.lineWidth=4;this.centerX=0;this.centerY=0;this.tempVec=vec3.create();this.fromX=0;this.fromY=0;this.toX=0;this.toY=0;this.length=0;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.create();this.color=vec3.create();this.unitX=vec3.fromValues(1,0,0);this.xf=vec3.create();this.radianOffset=0;this.quatMat=mat4.create();this.q=quat.create()}DrawSolidPolygon(vertices,vertexCount,color){mat4.mul(this.projViewMatrix,this.projMatrix,this.viewMatrix);gl.uniform3f(this.uColorLocation,color.r,color.g,color.b);this.drawLine(vertices[0],vertices[1]);this.drawLine(vertices[1],vertices[2]);this.drawLine(vertices[2],vertices[3]);this.drawLine(vertices[3],vertices[0])}drawLine(pointA,pointB){this.fromX=pointA.x*this.pixelsPerMeter;this.fromY=pointA.y*this.pixelsPerMeter;this.toX=pointB.x*this.pixelsPerMeter;this.toY=pointB.y*this.pixelsPerMeter;if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}this.tempVec[0]=this.toX-this.fromX;this.tempVec[1]=this.toY-this.fromY;this.length=vec3.length(this.tempVec);vec3.normalize(this.tempVec,this.tempVec);this.position[0]=this.centerX;this.position[1]=this.centerY;this.position[2]=0;quat.rotationTo(this.rotation,this.unitX,this.tempVec);this.scale[0]=this.length;this.scale[1]=this.lineWidth;this.scale[2]=1;mat4.identity(this.modelMatrix);mat4.translate(this.modelMatrix,this.modelMatrix,this.xf);quat.identity(this.q);quat.rotateZ(this.q,this.q,this.radianOffset);mat4.fromQuat(this.quatMat,this.q);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.translate(this.modelMatrix,this.modelMatrix,this.position);mat4.fromQuat(this.quatMat,this.rotation);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.scale(this.modelMatrix,this.modelMatrix,this.scale);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}PushTransform(xf){this.xf[0]=xf.p.x*this.pixelsPerMeter;this.xf[1]=xf.p.y*this.pixelsPerMeter;this.radianOffset=xf.q.s}PopTransform(xf){}DrawPolygon(vertices,vertexCount,color){}DrawCircle(center,radius,color){}DrawSolidCircle(center,radius,axis,color){}DrawSegment(p1,p2,color){}DrawTransform(xf){}DrawPoint(p,size,color){}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}class RayCaster{constructor(program){this.program=program;gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null}drawLine(from,to,color,thickness=1){const centerPoint=vec3.fromValues(from[0]+(to[0]-from[0])/2,from[1]+(to[1]-from[1])/2,0);const a=from[1]-to[1];const b=from[0]-to[0];const tan=a/b;const rad=Math.atan(tan);const v=vec3.fromValues(b,a,0);const length=vec3.length(v);mat4.fromTranslation(this.modelMatrix,centerPoint);mat4.rotateZ(this.modelMatrix,this.modelMatrix,rad);mat4.scale(this.modelMatrix,this.modelMatrix,[length,thickness,1]);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,color);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader));return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader));return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}const world=b2World.Create({x:0,y:-9.8});const pixelsPerMeter=30;const keyboard=new Keyboard;const groundColor=vec3.fromValues(.77,.37,.06);const groundPosition=vec3.fromValues(100,15,0);const groundSize=vec3.fromValues(190,19,1);const playerColor=vec3.fromValues(.4,.2,.8);const playerPosition=vec3.fromValues(80,150,0);const playerSize=vec3.fromValues(30,30,1);let playerBody,playerRad=0;let playerFixture;let found=false;let grounded=false;let fixtures=[];const platforms=[];platforms.push({pos:vec3.fromValues(50,70,0),size:vec3.fromValues(20,20,1)});platforms.push({pos:vec3.fromValues(100,100,0),size:vec3.fromValues(20,20,1)});platforms.push({pos:vec3.fromValues(150,150,0),size:vec3.fromValues(20,20,1)});let debugDrawer,showColliders=true,rayCaster;let program,uColorLocation,uMvpMatrixLocation;const projMatrix=mat4.create();mat4.ortho(projMatrix,0,200,0,200,1,-1);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,1],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const modelMatrix=mat4.create();const mvpMatrix=mat4.create();const input={p1:null,p2:null,maxFraction:1};const output={normal:new b2Vec2(0,0),fraction:1};const showCollidersCheckbox=document.getElementById("colliderCheckbox");showCollidersCheckbox.onchange=()=>{showColliders=showCollidersCheckbox.checked};const maxTimeStepMs=1/60*1e3;function step(deltaMs){const clampedDeltaMs=Math.min(deltaMs,maxTimeStepMs);world.Step(clampedDeltaMs/1e3,{velocityIterations:3,positionIterations:2});keyboardHandler()}function keyboardHandler(){if((keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp"))&&grounded){const vel=playerBody.GetLinearVelocity();vel.y=7;playerBody.SetLinearVelocity(vel)}else if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){const vel=playerBody.GetLinearVelocity();vel.x=-2;playerBody.SetLinearVelocity(vel)}else if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vel=playerBody.GetLinearVelocity();vel.x=2;playerBody.SetLinearVelocity(vel)}}function draw(){gl.clear(gl.COLOR_BUFFER_BIT);if(showColliders){DrawShapes(debugDrawer,world)}mat4.fromTranslation(modelMatrix,groundPosition);mat4.rotateZ(modelMatrix,modelMatrix,0);mat4.scale(modelMatrix,modelMatrix,groundSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,groundColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);for(var i=0;i<platforms.length;i++){mat4.fromTranslation(modelMatrix,platforms[i].pos);mat4.scale(modelMatrix,modelMatrix,platforms[i].size);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,groundColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}playerPosition[0]=playerBody.GetPosition().x*pixelsPerMeter;playerPosition[1]=playerBody.GetPosition().y*pixelsPerMeter;mat4.fromTranslation(modelMatrix,playerPosition);mat4.rotateZ(modelMatrix,modelMatrix,playerBody.GetAngle());mat4.scale(modelMatrix,modelMatrix,playerSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,playerColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);rayCaster.drawLine([playerPosition[0],playerPosition[1]+10],[playerPosition[0],playerPosition[1]+20],[1,1,1]);let point1=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]+10)/pixelsPerMeter);let point2=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]+20)/pixelsPerMeter);input.p1=point1;input.p2=point2;found=false;for(let i=0;i<fixtures.length;i++){found=fixtures[i].RayCast(output,input);if(found){const name=fixtures[i].GetUserData().name;console.log(`name = ${name}`);break}}rayCaster.drawLine([playerPosition[0],playerPosition[1]-10],[playerPosition[0],playerPosition[1]-20],[1,1,1]);point1=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]-10)/pixelsPerMeter);point2=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]-20)/pixelsPerMeter);input.p1=point1;input.p2=point2;grounded=false;for(let i=0;i<fixtures.length;i++){grounded=fixtures[i].RayCast(output,input);if(grounded)break}}async function init(){if(!initWebGLContext("renderCanvas"))return;gl.clearColor(.2,.2,.2,1);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);program=await createProgram("assets/shaders/","default.vert","default.frag");rayCaster=new RayCaster(program);rayCaster.projViewMatrix=projViewMatrix;uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");uColorLocation=gl.getUniformLocation(program,"uColor");const vertPositions=[-.5,-.5,.5,-.5,-.5,.5,.5,.5];const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const aPositionLocation=gl.getAttribLocation(program,"aPosition");gl.vertexAttribPointer(aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(aPositionLocation);debugDrawer=new DebugDrawer(program,pixelsPerMeter);debugDrawer.projMatrix=projMatrix;debugDrawer.viewMatrix=viewMatrix;const groundBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:groundPosition[0]/pixelsPerMeter,y:groundPosition[1]/pixelsPerMeter}});const groundShape=new b2PolygonShape;groundShape.SetAsBox(groundSize[0]/2/pixelsPerMeter,groundSize[1]/2/pixelsPerMeter);const groundFixture=groundBody.CreateFixture({shape:groundShape});fixtures.push(groundFixture);for(var i=0;i<platforms.length;i++){const body=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:platforms[i].pos[0]/pixelsPerMeter,y:platforms[i].pos[1]/pixelsPerMeter}});const shape=new b2PolygonShape;shape.SetAsBox(platforms[i].size[0]/2/pixelsPerMeter,platforms[i].size[1]/2/pixelsPerMeter);const fixture=body.CreateFixture({shape:shape});fixture.SetFriction(1);fixture.SetUserData({name:`platform_${i}`});fixtures.push(fixture)}const playerShape=new b2PolygonShape;playerShape.SetAsBox(playerSize[0]/2/pixelsPerMeter,playerSize[1]/2/pixelsPerMeter);playerBody=world.CreateBody({type:b2BodyType.b2_dynamicBody,position:{x:playerPosition[0]/pixelsPerMeter,y:playerPosition[1]/pixelsPerMeter},angle:playerRad});playerBody.SetFixedRotation(true);playerFixture=playerBody.CreateFixture({shape:playerShape,density:1});fixtures.push(playerFixture);(function animationLoop(prevMs){const nowMs=window.performance.now();window.requestAnimationFrame(animationLoop.bind(null,nowMs));const deltaMs=nowMs-prevMs;step(deltaMs);draw()})(window.performance.now())}init();