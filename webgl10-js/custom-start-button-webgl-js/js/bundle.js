import{mat4,vec3}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(gl.getShaderInfoLog(vShader));console.log(vertShaderSource);return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(fShader,gl.COMPILE_STATUS);if(!ok){console.log(gl.getShaderInfoLog(fShader));console.log(fragShaderSource);return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}function loadTexture(url,minType=gl.LINEAR,magType=gl.LINEAR){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}let uClickLocation,uPickColorLocation,uMvpMatrixLocation;const projMatrix=mat4.create();mat4.ortho(projMatrix,0,200,0,200,1,-1);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,1],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const modelMatrix=mat4.create();const mvpMatrix=mat4.create();const buttonPosition=vec3.fromValues(100,100,0);const buttonSize=vec3.fromValues(114,38,1);let mouseX=0;let mouseY=0;let clicked=false;let pressed=false;async function init(){if(!initWebGLContext("renderCanvas"))return;gl.clearColor(.77,.64,.52,1);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);const program=await createProgram("assets/shaders/","texture.vert","texture.frag");if(!program)return;uClickLocation=gl.getUniformLocation(program,"uClick");uPickColorLocation=gl.getUniformLocation(program,"uPickColor");uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");let response=await fetch("assets/textures/button.json");let content=await response.text();let json=JSON.parse(content);const tw=json["meta"]["size"]["w"];const th=json["meta"]["size"]["h"];const frame1=json["frames"]["button-normal.png"]["frame"];const f1x=frame1["x"];const f1y=frame1["y"];const f1w=frame1["w"];const f1h=frame1["h"];const frame2=json["frames"]["button-active.png"]["frame"];const f2x=frame2["x"];const f2y=frame2["y"];const f2w=frame2["w"];const f2h=frame2["h"];const vertPositions=[-.5,-.5,.5,-.5,-.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,.5,.5,.5];const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const aPositionLocation=gl.getAttribLocation(program,"aPosition");gl.vertexAttribPointer(aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(aPositionLocation);const texCoords=[f1x/tw,(f1y+f1h)/th,(f1x+f1w)/tw,(f1y+f1h)/th,f1x/tw,f1y/th,(f1x+f1w)/tw,f1y/th,f2x/tw,(f2y+f2h)/th,(f2x+f2w)/tw,(f2y+f2h)/th,f2x/tw,f2y/th,(f2x+f2w)/tw,f2y/th];const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoords),gl.STATIC_DRAW);const aTexCoordLocation=gl.getAttribLocation(program,"aTexCoord");gl.vertexAttribPointer(aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(aTexCoordLocation);const texture=await loadTexture("assets/textures/button.png");gl.bindTexture(gl.TEXTURE_2D,texture);gl.canvas.onmousedown=event=>{if(event.button===0){const rect=gl.canvas.getBoundingClientRect();mouseX=event.clientX-rect.left;mouseY=rect.bottom-event.clientY-1;clicked=true}};gl.canvas.onmouseup=event=>{pressed=false};draw()}function draw(){if(clicked){clicked=false;gl.clear(gl.COLOR_BUFFER_BIT);gl.uniform1i(uClickLocation,1);gl.uniform3fv(uPickColorLocation,vec3.fromValues(1,0,0));mat4.fromTranslation(modelMatrix,buttonPosition);mat4.rotateZ(modelMatrix,modelMatrix,30*Math.PI/180);mat4.scale(modelMatrix,modelMatrix,buttonSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);const pixels=new Uint8Array(4);gl.readPixels(mouseX,mouseY,1,1,gl.RGBA,gl.UNSIGNED_BYTE,pixels);const r=pixels[0];const g=pixels[1];const b=pixels[2];if(r===255&&g===0&&b===0){console.log("clicked");pressed=true}gl.uniform1i(uClickLocation,0)}gl.clear(gl.COLOR_BUFFER_BIT);mat4.fromTranslation(modelMatrix,buttonPosition);mat4.rotateZ(modelMatrix,modelMatrix,30*Math.PI/180);mat4.scale(modelMatrix,modelMatrix,buttonSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);if(!pressed){gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}else{gl.drawArrays(gl.TRIANGLE_STRIP,4,4)}requestAnimationFrame(draw)}init();