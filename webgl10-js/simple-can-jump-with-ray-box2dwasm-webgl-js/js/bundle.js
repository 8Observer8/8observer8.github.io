import{mat4,vec3,quat}from"gl-matrix";import Box2DLib from"box2d";let box2d=null;function initBox2D(){return new Promise(resolve=>{Box2DLib().then(re=>{box2d=re;resolve()})})}let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader));return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader));return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}class RayCaster{constructor(program){this.program=program;gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null}drawLine(from,to,color,thickness=1){const centerPoint=vec3.fromValues(from[0]+(to[0]-from[0])/2,from[1]+(to[1]-from[1])/2,0);const a=from[1]-to[1];const b=from[0]-to[0];const tan=a/b;const rad=Math.atan(tan);const v=vec3.fromValues(b,a,0);const length=vec3.length(v);mat4.fromTranslation(this.modelMatrix,centerPoint);mat4.rotateZ(this.modelMatrix,this.modelMatrix,rad);mat4.scale(this.modelMatrix,this.modelMatrix,[length,thickness,1]);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,color);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}}const sizeOfB2Vec=Float32Array.BYTES_PER_ELEMENT*2;class DebugDrawer{constructor(program,pixelsPerMeter){this.program=program;this.pixelsPerMeter=pixelsPerMeter;gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null;this.lineWidth=4;this.centerX=0;this.centerY=0;this.tempVec=vec3.create();this.fromX=0;this.fromY=0;this.toX=0;this.toY=0;this.length=0;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.create();this.color=vec3.create();this.unitX=vec3.fromValues(1,0,0);const{b2Color,b2Draw:{e_shapeBit},b2Vec2,JSDraw,wrapPointer}=box2d;const reifyArray=(array_p,numElements,sizeOfElement,ctor)=>Array(numElements).fill(undefined).map((_,index)=>wrapPointer(array_p+index*sizeOfElement,ctor));self=this;const debugDrawer=Object.assign(new JSDraw,{DrawSegment(vert1_p,vert2_p,color_p){},DrawPolygon(vertices_p,vertexCount,color_p){},DrawSolidPolygon(vertices_p,vertexCount,color_p){const color=wrapPointer(color_p,b2Color);const vertices=reifyArray(vertices_p,vertexCount,sizeOfB2Vec,b2Vec2);gl.uniform3f(self.uColorLocation,color.r,color.g,color.b);self.drawLine(vertices[0],vertices[1]);self.drawLine(vertices[1],vertices[2]);self.drawLine(vertices[2],vertices[3]);self.drawLine(vertices[3],vertices[0])},DrawCircle(center_p,radius,color_p){},DrawSolidCircle(center_p,radius,axis_p,color_p){},DrawTransform(transform_p){},DrawPoint(vertex_p,sizeMetres,color_p){}});debugDrawer.SetFlags(e_shapeBit);this.instance=debugDrawer}drawLine(pointA,pointB){this.fromX=pointA.x*this.pixelsPerMeter;this.fromY=pointA.y*this.pixelsPerMeter;this.toX=pointB.x*this.pixelsPerMeter;this.toY=pointB.y*this.pixelsPerMeter;if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}this.tempVec[0]=this.toX-this.fromX;this.tempVec[1]=this.toY-this.fromY;this.length=vec3.length(this.tempVec);vec3.normalize(this.tempVec,this.tempVec);this.position[0]=this.centerX;this.position[1]=this.centerY;this.position[2]=0;quat.rotationTo(this.rotation,this.unitX,this.tempVec);this.scale[0]=this.length;this.scale[1]=this.lineWidth;this.scale[2]=1;mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}let debugDrawer,raycaster,world,playerFixture;const pixelsPerMeter=30;const keyboard=new Keyboard;const metaData={};const groundColor=vec3.fromValues(.77,.37,.06);const groundPosition=vec3.fromValues(100,15,0);const groundSize=vec3.fromValues(190,19,1);const playerColor=vec3.fromValues(.1,.3,.9);const playerPosition=vec3.fromValues(20,50,0);const playerSize=vec3.fromValues(20,20,1);let playerBody;const fixtures=[];const platforms=[];platforms.push({pos:vec3.fromValues(50,70,0),size:vec3.fromValues(20,20,1)});platforms.push({pos:vec3.fromValues(100,100,0),size:vec3.fromValues(20,20,1)});platforms.push({pos:vec3.fromValues(150,150,0),size:vec3.fromValues(20,20,1)});let program,uColorLocation,uMvpMatrixLocation;const projMatrix=mat4.create();mat4.ortho(projMatrix,0,200,0,200,1,-1);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,1],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const modelMatrix=mat4.create();const mvpMatrix=mat4.create();let grounded=false;let showColliders=true;const showCollidersCheckbox=document.getElementById("colliderCheckBox");showCollidersCheckbox.onchange=()=>{showColliders=showCollidersCheckbox.checked};async function init(){if(!initWebGLContext("renderCanvas"))return;await initBox2D();const{b2_dynamicBody,b2BodyDef,b2Fixture,b2PolygonShape,b2Vec2,getPointer,JSRayCastCallback,wrapPointer,b2World}=box2d;gl.clearColor(.2,.2,.2,1);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);program=await createProgram("assets/shaders/","default.vert","default.frag");uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");uColorLocation=gl.getUniformLocation(program,"uColor");const vertPositions=[-.5,-.5,.5,-.5,-.5,.5,.5,.5];const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const aPositionLocation=gl.getAttribLocation(program,"aPosition");gl.vertexAttribPointer(aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(aPositionLocation);world=new b2World;const gravity=new b2Vec2(0,-9.8);world.SetGravity(gravity);debugDrawer=new DebugDrawer(program,pixelsPerMeter);debugDrawer.projViewMatrix=projViewMatrix;world.SetDebugDraw(debugDrawer.instance);raycaster=new RayCaster(program);raycaster.projViewMatrix=projViewMatrix;const groundBodyDef=new b2BodyDef;groundBodyDef.set_position(new b2Vec2(groundPosition[0]/pixelsPerMeter,groundPosition[1]/pixelsPerMeter));const groundBody=world.CreateBody(groundBodyDef);const groundShape=new b2PolygonShape;groundShape.SetAsBox(groundSize[0]/2/pixelsPerMeter,groundSize[1]/2/pixelsPerMeter);const groundFixture=groundBody.CreateFixture(groundShape,0);groundFixture.SetFriction(1);metaData[getPointer(groundFixture)]={name:"ground"};fixtures.push(groundFixture);for(var i=0;i<platforms.length;i++){const bodyDef=new b2BodyDef;bodyDef.set_position(new b2Vec2(platforms[i].pos[0]/pixelsPerMeter,platforms[i].pos[1]/pixelsPerMeter));const body=world.CreateBody(bodyDef);const shape=new b2PolygonShape;shape.SetAsBox(platforms[i].size[0]/2/pixelsPerMeter,platforms[i].size[1]/2/pixelsPerMeter);const fixture=body.CreateFixture(shape,0);fixture.SetFriction(1);metaData[getPointer(fixture)]={name:`platform_${i}`};fixtures.push(fixture)}const playerBodyDef=new b2BodyDef;playerBodyDef.set_position(new b2Vec2(playerPosition[0]/pixelsPerMeter,playerPosition[1]/pixelsPerMeter));playerBodyDef.type=b2_dynamicBody;playerBodyDef.fixedRotation=true;playerBody=world.CreateBody(playerBodyDef);const playerShape=new b2PolygonShape;playerShape.SetAsBox(playerSize[0]/2/pixelsPerMeter,playerSize[1]/2/pixelsPerMeter);playerFixture=playerBody.CreateFixture(playerShape,1);playerFixture.SetFriction(1);function keyboardHandler(){if(keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp")){const vel=playerBody.GetLinearVelocity();vel.y=5;playerBody.SetLinearVelocity(vel)}else if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){const vel=playerBody.GetLinearVelocity();vel.x=-2;playerBody.SetLinearVelocity(vel)}else if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vel=playerBody.GetLinearVelocity();vel.x=2;playerBody.SetLinearVelocity(vel)}}const maxTimeStepMs=1/60*1e3;function step(deltaMs){const clampedDeltaMs=Math.min(deltaMs,maxTimeStepMs);world.Step(clampedDeltaMs/1e3,3,2);keyboardHandler()}function draw(){gl.clear(gl.COLOR_BUFFER_BIT);if(showColliders){world.DebugDraw()}mat4.fromTranslation(modelMatrix,groundPosition);mat4.scale(modelMatrix,modelMatrix,groundSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,groundColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);for(var i=0;i<platforms.length;i++){mat4.fromTranslation(modelMatrix,platforms[i].pos);mat4.scale(modelMatrix,modelMatrix,platforms[i].size);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,groundColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}const position=playerBody.GetPosition();playerPosition[0]=position.x*pixelsPerMeter;playerPosition[1]=position.y*pixelsPerMeter;mat4.fromTranslation(modelMatrix,playerPosition);mat4.scale(modelMatrix,modelMatrix,playerSize);mat4.mul(mvpMatrix,projViewMatrix,modelMatrix);gl.uniformMatrix4fv(uMvpMatrixLocation,false,mvpMatrix);gl.uniform3fv(uColorLocation,playerColor);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);raycaster.drawLine([playerPosition[0],playerPosition[1]-5],[playerPosition[0],playerPosition[1]-15],[1,1,1]);const point1=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]-5)/pixelsPerMeter);const point2=new b2Vec2(playerPosition[0]/pixelsPerMeter,(playerPosition[1]-15)/pixelsPerMeter);const input={p1:point1,p2:point2,maxFraction:1};const output={normal:new b2Vec2(0,0),fraction:1};grounded=false;for(let i=0;i<fixtures.length;i++){grounded=fixtures[i].RayCast(output,input);if(grounded)break}console.log(`grounded = ${grounded}`)}(function animationLoop(prevMs){const nowMs=window.performance.now();window.requestAnimationFrame(animationLoop.bind(null,nowMs));const deltaMs=nowMs-prevMs;step(deltaMs);draw()})(window.performance.now())}init();