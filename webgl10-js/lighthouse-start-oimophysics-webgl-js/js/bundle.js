import"oimo-physics";import{mat4,vec3,quat,vec4}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${fragShaderFileName}: ${gl.getShaderInfoLog(vShader)}`);return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${vertShaderFileName}: ${gl.getShaderInfoLog(fShader)}`);return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log(`Link error with shaders ${vertShaderFileName}`+` and ${fragShaderFileName}`);console.log(gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}async function initVertexBuffers(path,modelNames){const vertexBuffers={};for(let i=0;i<modelNames.length;i++){const contentResponse=await fetch(path+modelNames[i]+".dae");const content=await contentResponse.text();const parser=new DOMParser;const xmlDoc=parser.parseFromString(content,"text/xml");const expForIndexes="//*[local-name() = 'p']/text()";let nodes=xmlDoc.evaluate(expForIndexes,xmlDoc,null,XPathResult.ANY_TYPE,null);let result=nodes.iterateNext();const order=result.textContent.trim().split(" ").map(value=>{return parseInt(value)});const partOfPositionsId="mesh-positions-array";const expForPositions=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfPositionsId}') + 1) = '${partOfPositionsId}']`;nodes=xmlDoc.evaluate(expForPositions,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const positions=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfNormalsId="mesh-normals-array";const expForNormals=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfNormalsId}') + 1) = '${partOfNormalsId}']`;nodes=xmlDoc.evaluate(expForNormals,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const normals=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfTexCoordsId="mesh-map-0-array";const expForTexCoords=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfTexCoordsId}') + 1) = '${partOfTexCoordsId}']`;nodes=xmlDoc.evaluate(expForTexCoords,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const texCoords=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const correctionMatrix=mat4.create();mat4.fromXRotation(correctionMatrix,-Math.PI/2);const vertPosResult=[];const normalsResult=[];const texCoordsResult=[];const amountOfTriangles=order.length/9;for(let i=0;i<amountOfTriangles;i++){for(let j=0;j<9;j++){if((i*9+j)%3===0){const vx=positions[order[i*9+j]*3+0];const vy=positions[order[i*9+j]*3+1];const vz=positions[order[i*9+j]*3+2];const oldPos=vec3.fromValues(vx,vy,vz);const newPos=vec3.create();vec3.transformMat4(newPos,oldPos,correctionMatrix);vertPosResult.push(newPos[0]);vertPosResult.push(newPos[1]);vertPosResult.push(newPos[2])}else if((i*9+j)%3===1){const nx=normals[order[i*9+j]*3+0];const ny=normals[order[i*9+j]*3+1];const nz=normals[order[i*9+j]*3+2];const oldNormal=vec3.fromValues(nx,ny,nz);const newNormal=vec3.create();vec3.transformMat4(newNormal,oldNormal,correctionMatrix);normalsResult.push(newNormal[0]);normalsResult.push(newNormal[1]);normalsResult.push(newNormal[2])}else if((i*9+j)%3===2){texCoordsResult.push(texCoords[order[i*9+j]*2+0]);texCoordsResult.push(texCoords[order[i*9+j]*2+1])}}}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPosResult),gl.STATIC_DRAW);const normalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,normalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalsResult),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoordsResult),gl.STATIC_DRAW);const buffers={vertPosBuffer:vertPosBuffer,normalBuffer:normalBuffer,texCoordBuffer:texCoordBuffer,amountOfVertices:vertPosResult.length/3};vertexBuffers[modelNames[i]]=buffers}return vertexBuffers}function loadTexture(url){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}class CameraRotator{constructor(canvas,drawCallback,viewDistance,rotX,rotY,panX,panY){this.canvas=canvas;this.xLimit=85;this.isPanning=false;this.panX=panX;this.panY=panY;this.prevXForPan=0;this.prevYForPan=0;this.m=mat4.create();this.canvas.oncontextmenu=event=>{event.preventDefault();return false};canvas.addEventListener("mousedown",event=>{if(event.button===0||event.button===1){this.doMouseDown(event)}else if(event.button===2){this.doMousePanDawn(event)}},false);canvas.addEventListener("wheel",event=>{this.doMouseWheel(event)},false);this.rotateX=rotX;this.rotateY=rotY;this.degreesPerPixelX=90/canvas.height;this.degreesPerPixelY=180/canvas.width;this.viewDistance=viewDistance;this.drawCallback=drawCallback;this.boundDoMouseDrag=this.doMouseDrag.bind(this);this.boundDoMouseUp=this.doMouseUp.bind(this);this.boundDoMousePanDrag=this.doMousePanDrag.bind(this);this.boundDoMousePanUp=this.doMousePanUp.bind(this)}getViewMatrix(event){const cosX=Math.cos(this.rotateX/180*Math.PI);const sinX=Math.sin(this.rotateX/180*Math.PI);const cosY=Math.cos(this.rotateY/180*Math.PI);const sinY=Math.sin(this.rotateY/180*Math.PI);this.m[0]=cosY,this.m[1]=sinX*sinY,this.m[2]=-cosX*sinY,this.m[3]=0;this.m[4]=0,this.m[5]=cosX,this.m[6]=sinX,this.m[7]=0;this.m[8]=sinY,this.m[9]=-sinX*cosY,this.m[10]=cosX*cosY,this.m[11]=0;this.m[12]=this.panX,this.m[13]=-this.panY,this.m[14]=-this.viewDistance,this.m[15]=1;return this.m}doMouseDown(event){this.isDraging=true;document.addEventListener("mousemove",this.boundDoMouseDrag,false);document.addEventListener("mouseup",this.boundDoMouseUp,false);const r=this.canvas.getBoundingClientRect();this.prevX=event.clientX-r.left;this.prevY=event.clientY-r.top}doMouseDrag(event){if(!this.isDraging){return}const r=this.canvas.getBoundingClientRect();const x=event.clientX-r.left;const y=event.clientY-r.top;let newRotX=this.rotateX+this.degreesPerPixelX*(y-this.prevY);const newRotY=this.rotateY+this.degreesPerPixelY*(x-this.prevX);newRotX=Math.max(-this.xLimit,Math.min(this.xLimit,newRotX));this.prevX=x;this.prevY=y;if(newRotX!=this.rotateX||newRotY!=this.rotateY){this.rotateX=newRotX;this.rotateY=newRotY;this.drawCallback()}}doMouseUp(event){if(!this.isDraging){return}this.isDraging=false;document.removeEventListener("mousedown",this.boundDoMouseDrag,false);document.removeEventListener("mouseup",this.boundDoMouseUp,false)}doMouseWheel(event){const delta=event.deltaY/100;this.viewDistance+=delta;this.drawCallback()}doMousePanDawn(event){if(this.isPanning){return}this.isPanning=true;document.addEventListener("mousemove",this.boundDoMousePanDrag,false);document.addEventListener("mouseup",this.boundDoMousePanUp,false);const r=this.canvas.getBoundingClientRect();this.prevXForPan=event.clientX-r.left;this.prevYForPan=event.clientY-r.top}doMousePanDrag(event){if(!this.isPanning){return}const r=this.canvas.getBoundingClientRect();const x=event.clientX-r.left;const y=event.clientY-r.top;this.panX=this.panX+(x-this.prevXForPan)/(this.viewDistance*.5);this.panY=this.panY+(y-this.prevYForPan)/(this.viewDistance*.5);this.prevXForPan=x;this.prevYForPan=y;this.drawCallback()}doMousePanUp(event){this.isPanning=false;document.removeEventListener("mousedown",this.boundDoMousePanDrag,false);document.removeEventListener("mouseup",this.boundDoMousePanUp,false)}}class DebugDrawer extends OIMO.DebugDraw{constructor(edge){super();this.edge=edge;this.projViewMatrix=null;this.centerX=0;this.centerY=0;this.centerZ=0;this.length=0;this.vec=vec3.create();this.x=0;this.y=0;this.z=0;this.unitX=vec3.fromValues(1,0,0)}point(v,color){console.log("point")}triangle(v1,v2,v3,n1,n2,n3,color){console.log("triangle")}line(from,to,color){this.edge.color[0]=color.x;this.edge.color[1]=color.y;this.edge.color[2]=color.z;if(from.x>to.x){this.centerX=to.x+Math.abs(from.x-to.x)/2}else{this.centerX=from.x+Math.abs(to.x-from.x)/2}if(from.y>to.y){this.centerY=to.y+Math.abs(from.y-to.y)/2}else{this.centerY=from.y+Math.abs(to.y-from.y)/2}if(from.z>to.z){this.centerZ=to.z+Math.abs(from.z-to.z)/2}else{this.centerZ=from.z+Math.abs(to.z-from.z)/2}this.vec[0]=to.x-from.x;this.vec[1]=to.y-from.y;this.vec[2]=to.z-from.z;this.length=vec3.length(this.vec);vec3.normalize(this.vec,this.vec);quat.rotationTo(this.edge.rotation,this.unitX,this.vec);this.edge.scale=[this.length,.2,.2];this.edge.position=[this.centerX,this.centerY,this.centerZ];this.edge.draw(this.projViewMatrix)}}class Object3D{constructor(program,vertexBuffers,isLightMap=false){this.program=program;this.vertexBuffers=vertexBuffers;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.normalMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.isLightMap=isLightMap;if(!isLightMap){this.aNormalLocation=gl.getAttribLocation(program,"aNormal");this.uModelMatrixLocation=gl.getUniformLocation(program,"uModelMatrix");this.uNormalMatrixLocation=gl.getUniformLocation(program,"uNormalMatrix")}}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);if(!this.isLightMap){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.normalBuffer);gl.vertexAttribPointer(this.aNormalLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aNormalLocation)}}draw(projViewMatrix){gl.useProgram(this.program);mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);if(!this.isLightMap){gl.uniformMatrix4fv(this.uModelMatrixLocation,false,this.modelMatrix);mat4.invert(this.normalMatrix,this.modelMatrix);mat4.transpose(this.normalMatrix,this.normalMatrix);gl.uniformMatrix4fv(this.uNormalMatrixLocation,false,this.normalMatrix)}}}class Object3DWithTexture extends Object3D{constructor(program,vertexBuffers,texture){super(program,vertexBuffers);this.texture=texture;gl.useProgram(program);this.aTexCoordLocation=gl.getAttribLocation(program,"aTexCoord")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){gl.useProgram(this.program);super.bind();this.bind();super.draw(projViewMatrix);gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}class Object3DWithLightMap extends Object3D{constructor(program,vertexBuffers,texture){super(program,vertexBuffers,true);this.texture=texture;gl.useProgram(program);this.aTexCoordLocation=gl.getAttribLocation(program,"aTexCoord")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){gl.useProgram(this.program);super.bind();this.bind();super.draw(projViewMatrix);gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}class Lightless{constructor(program,vertexBuffers){this.program=program;this.vertexBuffers=vertexBuffers;this.color=[1,0,0];this.position=vec3.fromValues(0,0,0);this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation)}draw(projViewMatrix){gl.useProgram(this.program);mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,this.color);this.bind();gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}let player,lighthouse,ground;let playerRigidBody;let vertexBuffers,debugDrawer;const keyboard=new Keyboard;let thirdPerson=true;const angularSpeed=2;const linearSpeed=10;const forward=vec3.fromValues(0,0,1);const zUnit=vec3.fromValues(0,0,1);const playerRotation=quat.create();quat.rotationTo(playerRotation,zUnit,forward);const direction=vec3.fromValues(forward[0],forward[1],forward[2]);const pitchForward=vec3.create();const forwardTrans=vec4.create();const dist=vec4.create();const cross=vec3.create();let cameraAngle=0;const lowLimitOfAngle=-80;const highLimitOfAngle=80;const cameraSpeed=50;let currentTime,lastTime,dt;const projMatrix=mat4.create();let viewMatrix=mat4.create();const projViewMatrix=mat4.create();const world=new OIMO.World;world.setGravity(new OIMO.Vec3(0,-9.8,0));let showColliders=false;const showCollidersCheckplayer=document.getElementById("colliderCheckBox");showColliders=showCollidersCheckplayer.checked;showCollidersCheckplayer.onchange=()=>{showColliders=showCollidersCheckplayer.checked};window.addEventListener("keydown",function(e){if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].indexOf(e.code)>-1){e.preventDefault()}},false);function thirdPersonKeyboardHandler(){if(keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(direction[0]*linearSpeed,vy,direction[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyS")||keyboard.pressed("ArrowDown")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(-direction[0]*linearSpeed,vy,-direction[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){const impulse=new OIMO.Vec3(0,angularSpeed,0);playerRigidBody.setAngularVelocity(impulse)}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const impulse=new OIMO.Vec3(0,-angularSpeed,0);playerRigidBody.setAngularVelocity(impulse)}vec3.transformQuat(direction,forward,player.rotation)}function firstPersonKeyboardHandler(dt){if(keyboard.pressed("KeyW")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(direction[0]*linearSpeed,vy,direction[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyS")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(-direction[0]*linearSpeed,vy,-direction[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyA")){const vy=playerRigidBody.getLinearVelocity().y;vec3.cross(cross,[0,1,0],[forwardTrans[0],forwardTrans[1],forwardTrans[2]]);const impulse=new OIMO.Vec3(cross[0]*linearSpeed,vy,cross[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vy=playerRigidBody.getLinearVelocity().y;vec3.cross(cross,[0,1,0],[forwardTrans[0],forwardTrans[1],forwardTrans[2]]);const impulse=new OIMO.Vec3(-cross[0]*linearSpeed,vy,-cross[2]*linearSpeed);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("ArrowUp")){cameraAngle-=cameraSpeed*dt;if(cameraAngle<lowLimitOfAngle){cameraAngle=lowLimitOfAngle}}if(keyboard.pressed("ArrowDown")){cameraAngle+=cameraSpeed*dt;if(cameraAngle>highLimitOfAngle){cameraAngle=highLimitOfAngle}}if(keyboard.pressed("ArrowLeft")){const impulse=new OIMO.Vec3(0,angularSpeed,0);playerRigidBody.setAngularVelocity(impulse)}if(keyboard.pressed("ArrowRight")){const impulse=new OIMO.Vec3(0,-angularSpeed,0);playerRigidBody.setAngularVelocity(impulse)}vec3.transformQuat(direction,forward,player.rotation)}function animationLoop(){currentTime=Date.now();dt=(currentTime-lastTime)/1e3;lastTime=currentTime;if(thirdPerson){thirdPersonKeyboardHandler()}else{firstPersonKeyboardHandler(dt)}world.step(dt);player.position[0]=playerRigidBody.getPosition().x;player.position[1]=playerRigidBody.getPosition().y;player.position[2]=playerRigidBody.getPosition().z;player.rotation[0]=playerRigidBody.getOrientation().x;player.rotation[1]=playerRigidBody.getOrientation().y;player.rotation[2]=playerRigidBody.getOrientation().z;player.rotation[3]=playerRigidBody.getOrientation().w;if(!thirdPerson){mat4.identity(viewMatrix);vec3.rotateX(pitchForward,forward,[0,0,0],cameraAngle*Math.PI/180);vec4.transformQuat(forwardTrans,[pitchForward[0],pitchForward[1],pitchForward[2],1],player.rotation);vec4.add(dist,[player.position[0],player.position[1],player.position[2],0],forwardTrans);mat4.lookAt(viewMatrix,[player.position[0],player.position[1]+5,player.position[2]],[dist[0],dist[1]+5,dist[2]],[0,1,0])}mat4.mul(projViewMatrix,projMatrix,viewMatrix);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);if(showColliders){world.debugDraw()}player.draw(projViewMatrix);lighthouse.draw(projViewMatrix);ground.draw(projViewMatrix);requestAnimationFrame(animationLoop)}async function init(){if(!initWebGLContext("renderCanvas"))return;gl.enable(gl.DEPTH_TEST);gl.clearColor(.2,.2,.2,1);gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,true);const cameraRotator=new CameraRotator(gl.canvas,()=>{if(thirdPerson){viewMatrix=cameraRotator.getViewMatrix()}},80,20,90,0,3);viewMatrix=cameraRotator.getViewMatrix();await createProgram("assets/shaders/","color.vert","color.frag");const defaultProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");const lightlessProgram=await createProgram("assets/shaders/","lightless.vert","lightless.frag");const lightmapProgram=await createProgram("assets/shaders/","lightmap.vert","lightmap.frag");vertexBuffers=await initVertexBuffers("assets/models/",["cube_1x1","player","lighthouse","ground"]);const playerTexture=await loadTexture("assets/models/player.png");const lighthouseTexture=await loadTexture("assets/models/lighthouse_colormap.png");const groundTexture=await loadTexture("assets/models/ground_colormap.png");player=new Object3DWithTexture(defaultProgram,vertexBuffers["player"],playerTexture);player.position=vec3.fromValues(0,1,-30);player.scale=vec3.fromValues(1,1,1);lighthouse=new Object3DWithLightMap(lightmapProgram,vertexBuffers["lighthouse"],lighthouseTexture);ground=new Object3DWithLightMap(lightmapProgram,vertexBuffers["ground"],groundTexture);const colliderEdge=new Lightless(lightlessProgram,vertexBuffers["cube_1x1"],vec3.fromValues(0,1,0));debugDrawer=new DebugDrawer(colliderEdge);debugDrawer.wireframe=true;world.setDebugDraw(debugDrawer);const playerRBConfig=new OIMO.RigidBodyConfig;playerRBConfig.type=OIMO.RigidBodyType.DYNAMIC;playerRBConfig.position=new OIMO.Vec3(player.position[0],player.position[1],player.position[2]);playerRigidBody=new OIMO.RigidBody(playerRBConfig);playerRigidBody.setOrientation(new OIMO.Quat(0,0,0,1));const playerShapeConfig=new OIMO.ShapeConfig;playerShapeConfig.geometry=new OIMO.SphereGeometry(player.scale[0]);playerShapeConfig.friction=10;playerRigidBody.addShape(new OIMO.Shape(playerShapeConfig));playerRigidBody.setRotationFactor(new OIMO.Vec3(0,0,0));playerRigidBody.setAngularDamping(10);world.addRigidBody(playerRigidBody);const staticColliderPositions=[[0,-.8215,-0],[-16.2807,2.3096,-0],[-7.9605,2.3096,14.3333],[8.358,2.3096,-14.2356],[16.4171,2.3096,-0],[-8.0726,2.3096,-14.1708],[8.0342,2.3096,14.3651]];const staticColliderRotatons=[[0,0,-0,1],[0,0,-0,1],[0,.501,-0,.8655],[0,.4992,-0,.8665],[0,0,-0,1],[0,.8681,-0,.4963],[0,.8681,-0,.4963]];const staticColliderScales=[[84.7847,.5,84.7847],[.5148,2.3918,9.8059],[.5148,2.3918,9.8059],[.5148,2.3918,9.8059],[.5148,2.3918,9.8059],[.5148,2.3918,9.8059],[.5148,2.3918,9.8059]];for(let i=0;i<staticColliderPositions.length;++i){let friction=0;if(i==0){friction=1}const rbConfig=new OIMO.RigidBodyConfig;rbConfig.type=OIMO.RigidBodyType.STATIC;rbConfig.position=new OIMO.Vec3(staticColliderPositions[i][0],staticColliderPositions[i][1],staticColliderPositions[i][2]);const rigidBody=new OIMO.RigidBody(rbConfig);rigidBody.setOrientation(new OIMO.Quat(staticColliderRotatons[i][0],staticColliderRotatons[i][1],staticColliderRotatons[i][2],staticColliderRotatons[i][3]));const shapeConfig=new OIMO.ShapeConfig;shapeConfig.geometry=new OIMO.BoxGeometry(new OIMO.Vec3(staticColliderScales[i][0],staticColliderScales[i][1],staticColliderScales[i][2]));shapeConfig.friction=friction;const shape=new OIMO.Shape(shapeConfig);rigidBody.addShape(shape);world.addRigidBody(rigidBody)}function testRadio(){if(this.id==="firstPerson"){thirdPerson=false}else if(this.id==="thirdPerson"){thirdPerson=true;viewMatrix=cameraRotator.getViewMatrix()}else{console.log("unknown name")}}const radio=document.getElementsByName("camera");for(let i=0;i<radio.length;i++){radio[i].onchange=testRadio}window.onresize=()=>{const w=gl.canvas.clientWidth;const h=gl.canvas.clientHeight;gl.canvas.width=w;gl.canvas.height=h;gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);mat4.perspective(projMatrix,55*Math.PI/180,w/h,.1,500);debugDrawer.projViewMatrix=projViewMatrix;lastTime=Date.now();animationLoop()};window.onresize(null)}init();