import*as me from"melonjs";import{b2World,b2PolygonShape,b2BodyType,b2CircleShape,DrawShapes}from"@box2d/core";class DebugDrawer{constructor(renderer,pixelsPerMeter){this.renderer=renderer;this.pixelsPerMeter=pixelsPerMeter;this.translationX=0;this.translationY=0;this.angle=0}DrawSolidPolygon(vertices,vertexCount,color){this.renderer.setLineWidth(3);this.renderer.beginPath();const c=(new me.Color).setFloat(color.r,color.g,color.b,1);this.renderer.setColor(c);this.renderer.moveTo((vertices[0].x+this.translationX)*this.pixelsPerMeter,(vertices[0].y+this.translationY)*this.pixelsPerMeter);this.renderer.lineTo((vertices[1].x+this.translationX)*this.pixelsPerMeter,(vertices[1].y+this.translationY)*this.pixelsPerMeter);this.renderer.lineTo((vertices[2].x+this.translationX)*this.pixelsPerMeter,(vertices[2].y+this.translationY)*this.pixelsPerMeter);this.renderer.lineTo((vertices[3].x+this.translationX)*this.pixelsPerMeter,(vertices[3].y+this.translationY)*this.pixelsPerMeter);this.renderer.lineTo((vertices[0].x+this.translationX)*this.pixelsPerMeter,(vertices[0].y+this.translationY)*this.pixelsPerMeter);this.renderer.stroke()}PushTransform(xf){this.renderer.save();this.renderer.translate(xf.p.x*this.pixelsPerMeter,xf.p.y*this.pixelsPerMeter);this.renderer.rotate(xf.q.GetAngle())}PopTransform(xf){this.renderer.restore()}DrawPolygon(vertices,vertexCount,color){}DrawCircle(center,radius,color){}DrawSolidCircle(center,radius,axis,color){let angle=0;const angleStep=20;const n=360/angleStep;radius=radius*this.pixelsPerMeter;this.renderer.setLineWidth(3);this.renderer.beginPath();const c=(new me.Color).setFloat(color.r,color.g,color.b,1);this.renderer.setColor(c);let x=radius*Math.cos(angle*Math.PI/180);let y=radius*Math.sin(angle*Math.PI/180);this.renderer.moveTo(x,y);angle+=angleStep;for(let i=0;i<n;i++){x=radius*Math.cos(angle*Math.PI/180);y=radius*Math.sin(angle*Math.PI/180);this.renderer.lineTo(x,y);angle+=angleStep}this.renderer.stroke()}DrawSegment(p1,p2,color){}DrawTransform(xf){}DrawPoint(p,size,color){}}me.device.onReady(()=>{if(!me.video.init(300,300,{parent:"screen",renderer:me.video.CANVAS,scale:"fit",antiAlias:true})){alert("Your browser does not support HTML5 canvas.");return}class Graphics extends me.Renderable{constructor(){super(0,0,me.game.viewport.width,me.game.viewport.height);this.anchorPoint.set(0,0);this.world=b2World.Create({x:0,y:9.8});this.pixelsPerMeter=30;this.debugDrawer=new DebugDrawer(me.game.renderer,this.pixelsPerMeter);const groundShape=new b2PolygonShape;groundShape.SetAsBox(130/this.pixelsPerMeter,20/this.pixelsPerMeter);const groundBody=this.world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:150/this.pixelsPerMeter,y:270/this.pixelsPerMeter}});groundBody.CreateFixture({shape:groundShape});const boxShape=new b2PolygonShape;boxShape.SetAsBox(30/this.pixelsPerMeter,30/this.pixelsPerMeter);const boxBody=this.world.CreateBody({type:b2BodyType.b2_dynamicBody,position:{x:100/this.pixelsPerMeter,y:30/this.pixelsPerMeter},angle:30*Math.PI/180});boxBody.CreateFixture({shape:boxShape,density:1});const circleShape=new b2CircleShape(20/this.pixelsPerMeter);const circleBody=this.world.CreateBody({type:b2BodyType.b2_dynamicBody,position:{x:200/this.pixelsPerMeter,y:50/this.pixelsPerMeter}});const circleFixture=circleBody.CreateFixture({shape:circleShape,density:1});circleFixture.SetRestitution(.5);const platformShape=new b2PolygonShape;platformShape.SetAsBox(50/this.pixelsPerMeter,5/this.pixelsPerMeter);const platformBody=this.world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:220/this.pixelsPerMeter,y:200/this.pixelsPerMeter},angle:-20*Math.PI/180});platformBody.CreateFixture({shape:platformShape})}update(dt){this.world.Step(dt/1e3,{velocityIterations:3,positionIterations:2});return true}draw(renderer){renderer.clearColor("#000000");renderer.setGlobalAlpha(1);DrawShapes(this.debugDrawer,this.world)}}me.game.world.addChild(new Graphics)});