import{vec3,quat,mat4}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}class Animation{constructor(lengthInSeconds,frames){this.length=lengthInSeconds;this.keyFrames=frames}getLength(){return this._length}getKeyFrames(){return this.keyFrames}}class Joint{constructor(index,name,localBindTransform){this.index=index;this.name=name;this.localBindTransform=localBindTransform;this.animatedTransform=mat4.create();this.inverseBindTransform=mat4.create();this.children=[]}addChild(child){this.children.push(child)}getAnimatedTransform(){return this.animatedTransform}setAnimatedTransform(animatedTransform){this.animatedTransform=animatedTransform}getInverseBindTransform(){return this.inverseBindTransform}calcInverseBindTransform(parentBindTransform){const bindTransform=mat4.create();mat4.mul(bindTransform,parentBindTransform,this.localBindTransform);mat4.invert(this.inverseBindTransform,bindTransform);this.children.forEach(child=>{child.calcInverseBindTransform(bindTransform)})}}class JointTransform{constructor(position,rotation){this.position=position;this.rotation=rotation}getLocalTransform(){const translationMatrix=mat4.create();mat4.fromTranslation(translationMatrix,this.position);const rotationMatrix=mat4.create();mat4.fromQuat(rotationMatrix,this.rotation);const resultMatrix=mat4.create();mat4.mul(resultMatrix,translationMatrix,rotationMatrix);return resultMatrix}static interpolate(frameA,frameB,progression){const pos=vec3.create();vec3.lerp(pos,frameA.position,frameB.position,progression);const rot=quat.create();quat.slerp(rot,frameA.rotation,frameB.rotation,progression);return new JointTransform(pos,rot)}}class KeyFrame{constructor(timeStamp,pose){this.timeStamp=timeStamp;this.pose=pose}getTimeStamp(){return this.timeStamp}getJointKeyFrames(){return this.pose}}class Animated{constructor(vertexBuffers,parts){this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.modelMatrix=mat4.create();this.animationTimes=vertexBuffers.animationTimes;this.jointCount=vertexBuffers.jointCount;this.animation=this.createAnimation(vertexBuffers.animationData);this.animationData=vertexBuffers.animationData;this.headJoint=this.createJoints(vertexBuffers.headJoint);this.parts=parts;this.currentAnimTime=this.animationTimes[0];this.animationLength=this.animationTimes[this.animationTimes.length-1]}createAnimation(animationData){const frames=[];for(let i=0;i<animationData.keyFrames.length;i++){frames.push(this.createKeyFrame(animationData.keyFrames[i]))}return new Animation(animationData.lengthSeconds,frames)}createKeyFrame(data){const map=[];data.jointTransforms.forEach(jointData=>{const jointTransform=this.createTransform(jointData);map[jointData.jointNameId]=jointTransform});return new KeyFrame(data.time,map)}createTransform(data){const mat=data.localBindTransform;const translation=vec3.create();mat4.getTranslation(translation,mat);const rotation=quat.create();mat4.getRotation(rotation,mat);return new JointTransform(translation,rotation)}createJoints(data){const joint=new Joint(data.index,data.nameId,data.localBindTransform);data.children.forEach(child=>{joint.addChild(this.createJoints(child))});return joint}drawParts(projViewMatrix,currentPose,joint,parentTransform){const currentLocalTransform=currentPose[joint.name];const currentTransform=mat4.create();mat4.mul(currentTransform,parentTransform,currentLocalTransform);if(this.parts[joint.name]){this.parts[joint.name].modelMatrix=currentTransform;this.parts[joint.name].draw(projViewMatrix)}joint.children.forEach(childJoint=>{this.drawParts(projViewMatrix,currentPose,childJoint,currentTransform)})}draw(projViewMatrix,deltaTime){this.increaseAnimationTime(deltaTime);const currentPose=this.calculateCurrentAnimationPose();mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);this.drawParts(projViewMatrix,currentPose,this.headJoint,this.modelMatrix)}increaseAnimationTime(deltaTime){this.currentAnimTime+=deltaTime;if(this.currentAnimTime>this.animationLength){this.currentAnimTime=this.animationTimes[0]}}calculateCurrentAnimationPose(){const frames=this.getPreviousAndNextFrames();const progression=this.calculateProgression(frames[0],frames[1]);return this.interpolatePoses(frames[0],frames[1],progression)}getPreviousAndNextFrames(){const allFrames=this.animation.getKeyFrames();let previousFrame=allFrames[0];let nextFrame=allFrames[0];for(let i=1;i<allFrames.length;i++){nextFrame=allFrames[i];if(nextFrame.getTimeStamp()>this.currentAnimTime){break}previousFrame=allFrames[i]}const keyFrames=[previousFrame,nextFrame];return keyFrames}calculateProgression(previousFrame,nextFrame){const totalTime=nextFrame.getTimeStamp()-previousFrame.getTimeStamp();const currentTime=this.currentAnimTime-previousFrame.getTimeStamp();return totalTime!==0?currentTime/totalTime:0}interpolatePoses(previousFrame,nextFrame,progression){const currentPose=[];Object.keys(previousFrame.getJointKeyFrames()).forEach(jointName=>{const previousTransform=previousFrame.getJointKeyFrames()[jointName];const nextTransform=nextFrame.getJointKeyFrames()[jointName];const currentTransform=JointTransform.interpolate(previousTransform,nextTransform,progression);currentPose[jointName]=currentTransform.getLocalTransform()});return currentPose}}class ObjectForGraphics{constructor(program,position,vertexBuffers,texture){this.position=position;this.rotation=quat.create();this.scale=[1,1,1];this.amountOfVertices=vertexBuffers.amountOfVertices;this.vertPosBuffer=vertexBuffers.vertPosBuffer;this.normalBuffer=vertexBuffers.normalBuffer;this.texCoordBuffer=vertexBuffers.texCoordBuffer;this.texture=texture;this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.normalMatrix=mat4.create();gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uModelMatrixLocation=gl.getUniformLocation(program,"uModelMatrix");this.uNormalMatrixLocation=gl.getUniformLocation(program,"uNormalMatrix");this.program=program}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(0,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(0);gl.bindBuffer(gl.ARRAY_BUFFER,this.normalBuffer);gl.vertexAttribPointer(1,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(1);gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.vertexAttribPointer(2,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(2);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){gl.useProgram(this.program);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniformMatrix4fv(this.uModelMatrixLocation,false,this.modelMatrix);mat4.invert(this.normalMatrix,this.modelMatrix);mat4.transpose(this.normalMatrix,this.normalMatrix);gl.uniformMatrix4fv(this.uNormalMatrixLocation,false,this.normalMatrix);this.bind();gl.drawArrays(gl.TRIANGLES,0,this.amountOfVertices)}}class CameraRotator{constructor(canvas,drawCallback,viewDistance,rotX,rotY,panX,panY){this.canvas=canvas;this.xLimit=85;this.isPanning=false;this.panX=panX;this.panY=panY;this.prevXForPan=0;this.prevYForPan=0;this.canvas.oncontextmenu=event=>{event.preventDefault();return false};canvas.addEventListener("mousedown",event=>{if(event.button===1){this.doMouseDown(event)}else if(event.button===2){this.doMousePanDawn(event)}},false);canvas.addEventListener("wheel",event=>{this.doMouseWheel(event)},false);this.rotateX=rotX;this.rotateY=rotY;this.degreesPerPixelX=90/canvas.height;this.degreesPerPixelY=180/canvas.width;this.viewDistance=viewDistance;this.drawCallback=drawCallback;this.boundDoMouseDrag=this.doMouseDrag.bind(this);this.boundDoMouseUp=this.doMouseUp.bind(this);this.boundDoMousePanDrag=this.doMousePanDrag.bind(this);this.boundDoMousePanUp=this.doMousePanUp.bind(this)}getViewMatrix(event){const cosX=Math.cos(this.rotateX/180*Math.PI);const sinX=Math.sin(this.rotateX/180*Math.PI);const cosY=Math.cos(this.rotateY/180*Math.PI);const sinY=Math.sin(this.rotateY/180*Math.PI);const m=mat4.create();m[0]=cosY,m[1]=sinX*sinY,m[2]=-cosX*sinY,m[3]=0;m[4]=0,m[5]=cosX,m[6]=sinX,m[7]=0;m[8]=sinY,m[9]=-sinX*cosY,m[10]=cosX*cosY,m[11]=0;m[12]=this.panX,m[13]=-this.panY,m[14]=-this.viewDistance,m[15]=1;return m}doMouseDown(event){this.isDraging=true;document.addEventListener("mousemove",this.boundDoMouseDrag,false);document.addEventListener("mouseup",this.boundDoMouseUp,false);const r=this.canvas.getBoundingClientRect();this.prevX=event.clientX-r.left;this.prevY=event.clientY-r.top}doMouseDrag(event){if(!this.isDraging){return}const r=this.canvas.getBoundingClientRect();const x=event.clientX-r.left;const y=event.clientY-r.top;let newRotX=this.rotateX+this.degreesPerPixelX*(y-this.prevY);const newRotY=this.rotateY+this.degreesPerPixelY*(x-this.prevX);newRotX=Math.max(-this.xLimit,Math.min(this.xLimit,newRotX));this.prevX=x;this.prevY=y;if(newRotX!=this.rotateX||newRotY!=this.rotateY){this.rotateX=newRotX;this.rotateY=newRotY;this.drawCallback()}}doMouseUp(event){if(!this.isDraging){return}this.isDraging=false;document.removeEventListener("mousedown",this.boundDoMouseDrag,false);document.removeEventListener("mouseup",this.boundDoMouseUp,false)}doMouseWheel(event){const delta=event.deltaY/100;this.viewDistance+=delta;this.drawCallback()}doMousePanDawn(event){if(this.isPanning){return}this.isPanning=true;document.addEventListener("mousemove",this.boundDoMousePanDrag,false);document.addEventListener("mouseup",this.boundDoMousePanUp,false);const r=this.canvas.getBoundingClientRect();this.prevXForPan=event.clientX-r.left;this.prevYForPan=event.clientY-r.top}doMousePanDrag(event){if(!this.isPanning){return}const r=this.canvas.getBoundingClientRect();const x=event.clientX-r.left;const y=event.clientY-r.top;this.panX=this.panX+(x-this.prevXForPan)/100;this.panY=this.panY+(y-this.prevYForPan)/100;this.prevXForPan=x;this.prevYForPan=y;this.drawCallback()}doMousePanUp(event){this.isPanning=false;document.removeEventListener("mousedown",this.boundDoMousePanDrag,false);document.removeEventListener("mouseup",this.boundDoMousePanUp,false)}}class AnimationData{constructor(lengthSeconds,keyFrames){this.lengthSeconds=lengthSeconds;this.keyFrames=keyFrames}}class JointData{constructor(index,nameId,localBindTransform){this.index=index;this.nameId=nameId;this.localBindTransform=localBindTransform;this.children=[]}addChild(child){this.children.push(child)}}class JointTransformData{constructor(jointNameId,localBindTransform){this.jointNameId=jointNameId;this.localBindTransform=localBindTransform}}class KeyFrameData{constructor(time){this.time=time;this.jointTransforms=[]}addJointTransform(transform){this.jointTransforms.push(transform)}}async function initVertexBuffers(path,modelNames){const vertexBuffers={};for(let i=0;i<modelNames.length;i++){const contentResponse=await fetch(path+modelNames[i]+".dae");const content=await contentResponse.text();const parser=new DOMParser;const xmlDoc=parser.parseFromString(content,"text/xml");const expForIndexes="//*[local-name() = 'p']/text()";let nodes=xmlDoc.evaluate(expForIndexes,xmlDoc,null,XPathResult.ANY_TYPE,null);let result=nodes.iterateNext();if(!result){let animationData,animationTimes,headJoint,keyFrames;let jointCount=0;const boneNames=[];const initKeyFrames=times=>{const frames=[];for(let i=0;i<times.length;i++){frames.push(new KeyFrameData(times[i]))}return frames};const getDataId=jointDataElement=>{let data;for(let i=0;i<jointDataElement.children.length;i++){if(jointDataElement.children[i].tagName==="sampler"){const samplerElement=jointDataElement.children[i];for(let i=0;i<samplerElement.children.length;i++){const inputElement=samplerElement.children[i];if(inputElement.getAttribute("semantic")==="OUTPUT"){data=inputElement.getAttribute("source").substr(1)}}}}return data};const getJointName=jointDataElement=>{let data;for(let i=0;i<jointDataElement.children.length;i++){if(jointDataElement.children[i].tagName==="channel"){const channelElement=jointDataElement.children[i];data=channelElement.getAttribute("target")}}return data.split("/")[0]};const processTransforms=(jointName,data,keyFrames,root)=>{for(let i=0;i<keyFrames.length;i++){const transform=mat4.create();for(let j=0;j<16;j++){transform[j]=data[i*16+j]}mat4.transpose(transform,transform);if(root){const correction=mat4.create();mat4.fromRotation(correction,-Math.PI/2,[1,0,0]);mat4.mul(transform,correction,transform)}keyFrames[i].addJointTransform(new JointTransformData(jointName,transform))}};const loadJointTransforms=(frames,jointDataElement,rootNodeId)=>{const jointNameId=getJointName(jointDataElement);boneNames.push(jointNameId);const dataId=getDataId(jointDataElement);for(let i=0;i<jointDataElement.children.length;i++){if(jointDataElement.children[i].tagName==="source"){const sourceElement=jointDataElement.children[i];const id=sourceElement.getAttribute("id");if(id===dataId){for(let j=0;j<sourceElement.children.length;j++){if(sourceElement.children[j].tagName==="float_array"){const floatArrayElement=sourceElement.children[j];const data=floatArrayElement.textContent.trim().split(" ").map(value=>{return parseFloat(value)});processTransforms(jointNameId,data,frames,jointNameId===rootNodeId)}}}}}};const floatArrayElements=xmlDoc.getElementsByTagName("float_array");for(let i=0;i<floatArrayElements.length;i++){const id=floatArrayElements[i].getAttribute("id");if(id.match("_pose_matrix-input-array")){animationTimes=floatArrayElements[i].textContent.trim().split(" ").map(value=>{return parseFloat(value)});break}}const duration=animationTimes[animationTimes.length-1];keyFrames=initKeyFrames(animationTimes);const animationElements=xmlDoc.getElementsByTagName("library_animations")[0].children;for(let i=0;i<animationElements.length;i++){loadJointTransforms(keyFrames,animationElements[i],"part0")}animationData=new AnimationData(duration,keyFrames);const extractMainJointData=(jointElement,isRoot)=>{const nameId=jointElement.getAttribute("name").replace(".","_");const index=boneNames.indexOf(nameId);const correctionMatrix=mat4.create();mat4.fromXRotation(correctionMatrix,-Math.PI/2);let matrix;for(let i=0;i<jointElement.children.length;i++){if(jointElement.children[i].tagName=="matrix"){const matrixElement=jointElement.children[i];const matrixData=matrixElement.textContent.trim().split(" ").map(value=>{return parseFloat(value)});matrix=mat4.fromValues(matrixData[0],matrixData[4],matrixData[8],matrixData[12],matrixData[1],matrixData[5],matrixData[9],matrixData[13],matrixData[2],matrixData[6],matrixData[10],matrixData[14],matrixData[3],matrixData[7],matrixData[11],matrixData[15])}}if(isRoot){mat4.mul(matrix,correctionMatrix,matrix)}jointCount++;return new JointData(index,nameId,matrix)};const loadJointData=(jointElement,isRoot)=>{const joint=extractMainJointData(jointElement,isRoot);for(let i=0;i<jointElement.children.length;i++){if(jointElement.children[i].tagName==="node"){const nodeElement=jointElement.children[i];joint.addChild(loadJointData(nodeElement,false))}}return joint};const sceneChildren=xmlDoc.getElementsByTagName("visual_scene")[0].children;for(let i=0;i<sceneChildren.length;i++){const id=sceneChildren[i].getAttribute("id");if(id.match("Armature")){const armatureElement=sceneChildren[i];for(let j=0;j<armatureElement.children.length;j++){if(armatureElement.children[j].tagName=="node"){const headElement=armatureElement.children[j];headJoint=loadJointData(headElement,true)}}}}const buffers={animationData:animationData,animationTimes:animationTimes,headJoint:headJoint,jointCount:jointCount};vertexBuffers[modelNames[i]]=buffers;continue}const order=result.textContent.trim().split(" ").map(value=>{return parseInt(value)});const partOfPositionsId="mesh-positions-array";const expForPositions=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfPositionsId}') + 1) = '${partOfPositionsId}']`;nodes=xmlDoc.evaluate(expForPositions,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const positions=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfNormalsId="mesh-normals-array";const expForNormals=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfNormalsId}') + 1) = '${partOfNormalsId}']`;nodes=xmlDoc.evaluate(expForNormals,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const normals=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfTexCoordsId="mesh-map-0-array";const expForTexCoords=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfTexCoordsId}') + 1) = '${partOfTexCoordsId}']`;nodes=xmlDoc.evaluate(expForTexCoords,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const texCoords=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const correctionMatrix=mat4.create();mat4.fromXRotation(correctionMatrix,-Math.PI/2);const vertPosResult=[];const normalsResult=[];const texCoordsResult=[];const amountOfTriangles=order.length/9;for(let i=0;i<amountOfTriangles;i++){for(let j=0;j<9;j++){if((i*9+j)%3===0){const vx=positions[order[i*9+j]*3+0];const vy=positions[order[i*9+j]*3+1];const vz=positions[order[i*9+j]*3+2];const oldPos=vec3.fromValues(vx,vy,vz);const newPos=vec3.create();vec3.transformMat4(newPos,oldPos,correctionMatrix);vertPosResult.push(newPos[0]);vertPosResult.push(newPos[1]);vertPosResult.push(newPos[2])}else if((i*9+j)%3===1){const nx=normals[order[i*9+j]*3+0];const ny=normals[order[i*9+j]*3+1];const nz=normals[order[i*9+j]*3+2];const oldNormal=vec3.fromValues(nx,ny,nz);const newNormal=vec3.create();vec3.transformMat4(newNormal,oldNormal,correctionMatrix);normalsResult.push(newNormal[0]);normalsResult.push(newNormal[1]);normalsResult.push(newNormal[2])}else if((i*9+j)%3===2){texCoordsResult.push(texCoords[order[i*9+j]*2+0]);texCoordsResult.push(texCoords[order[i*9+j]*2+1])}}}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPosResult),gl.STATIC_DRAW);const normalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,normalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalsResult),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoordsResult),gl.STATIC_DRAW);const buffers={vertPosBuffer:vertPosBuffer,normalBuffer:normalBuffer,texCoordBuffer:texCoordBuffer,amountOfVertices:vertPosResult.length/3};vertexBuffers[modelNames[i]]=buffers}return vertexBuffers}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${fragShaderFileName}: ${gl.getShaderInfoLog(vShader)}`);return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${vertShaderFileName}: ${gl.getShaderInfoLog(fShader)}`);return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log(`Link error with shaders ${vertShaderFileName}`+` and ${fragShaderFileName}`);console.log(gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}function loadTexture(url){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}let barry;const projMatrix=mat4.create();let viewMatrix=mat4.create();const projViewMatrix=mat4.create();let currentTime,deltaTime,lastTime;async function init(){if(!initWebGLContext("renderCanvas"))return;gl.enable(gl.DEPTH_TEST);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,true);gl.clearColor(.8,.85,.9,1);const cameraRotator=new CameraRotator(gl.canvas,()=>{viewMatrix=cameraRotator.getViewMatrix()},8,0,0,0,3);viewMatrix=cameraRotator.getViewMatrix();const defaultProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");gl.useProgram(defaultProgram);const lightPosition=vec3.fromValues(0,0,10);const uLightPositionLocation=gl.getUniformLocation(defaultProgram,"uLightPosition");gl.uniform3fv(uLightPositionLocation,lightPosition);const barryTexture=await loadTexture("assets/models/barry/CHAR12.bmp");const barryPartNames=[];for(let i=0;i<15;i++){barryPartNames.push(`barry-${i}`)}barryPartNames.push("armature");const barryVertexBuffers=await initVertexBuffers("assets/models/barry/",barryPartNames);const barryParts=[];for(let i=0;i<15;i++){barryParts[`part${i}`]=new ObjectForGraphics(defaultProgram,[0,0,0],barryVertexBuffers[`barry-${i}`],barryTexture)}barry=new Animated(barryVertexBuffers["armature"],barryParts);barry.rotation=quat.fromValues(0,1,0,0);window.onresize=()=>{const w=gl.canvas.clientWidth;const h=gl.canvas.clientHeight;gl.canvas.width=w;gl.canvas.height=h;gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);mat4.perspective(projMatrix,55*Math.PI/180,w/h,.1,500)};window.onresize(null);lastTime=Date.now();draw()}function draw(){requestAnimationFrame(()=>draw());currentTime=Date.now();deltaTime=(currentTime-lastTime)/1e3;lastTime=Date.now();gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);mat4.mul(projViewMatrix,projMatrix,viewMatrix);barry.draw(projViewMatrix,deltaTime)}init();