import Box2DLib from"box2d-wasm";import*as PIXI from"pixi.js";let box2d=null;function initBox2D(){return new Promise(resolve=>{Box2DLib().then(re=>{box2d=re;resolve()})})}const sizeOfB2Vec2=Float32Array.BYTES_PER_ELEMENT*2;class DebugDrawer{constructor(stage,pixelsPerMeter,thickness=3){this.lines=new PIXI.Graphics;stage.addChild(this.lines);this.pixelsPerMeter=pixelsPerMeter;this.thickness=thickness;const{b2Color,b2Draw:{e_shapeBit},b2Vec2,JSDraw,wrapPointer}=box2d;const reifyArray=(array_p,numElements,sizeOfElement,ctor)=>Array(numElements).fill(undefined).map((_,index)=>wrapPointer(array_p+index*sizeOfElement,ctor));self=this;const debugDrawer=Object.assign(new JSDraw,{DrawSegment(vert1_p,vert2_p,color_p){},DrawPolygon(vertices_p,vertexCount,color_p){},DrawSolidPolygon(vertices_p,vertexCount,color_p){const color=wrapPointer(color_p,b2Color);const vertices=reifyArray(vertices_p,vertexCount,sizeOfB2Vec2,b2Vec2);self.drawLines(vertices,color)},DrawCircle(center_p,radius,color_p){},DrawSolidCircle(center_p,radius,axis_p,color_p){const center=wrapPointer(center_p,b2Vec2);const color=wrapPointer(color_p,b2Color);self.drawCircle(center.x*self.pixelsPerMeter,center.y*self.pixelsPerMeter,radius*self.pixelsPerMeter,color)},DrawTransform(transform_p){},DrawPoint(vertex_p,sizeMetres,color_p){}});debugDrawer.SetFlags(e_shapeBit);this.instance=debugDrawer}drawLines(vertices,color){const c=new PIXI.Color([color.r,color.g,color.b]).toHex();this.lines.lineStyle(this.thickness,c,1,.5,false);this.lines.moveTo(vertices[0].x*this.pixelsPerMeter,vertices[0].y*this.pixelsPerMeter);this.lines.lineTo(vertices[1].x*this.pixelsPerMeter,vertices[1].y*this.pixelsPerMeter);this.lines.lineTo(vertices[2].x*this.pixelsPerMeter,vertices[2].y*this.pixelsPerMeter);this.lines.lineTo(vertices[3].x*this.pixelsPerMeter,vertices[3].y*this.pixelsPerMeter);this.lines.lineTo(vertices[0].x*this.pixelsPerMeter,vertices[0].y*this.pixelsPerMeter)}drawCircle(x0,y0,radius,color){let angle=0;const angleStep=20;const n=360/angleStep;const c=new PIXI.Color([color.r,color.g,color.b]).toHex();this.lines.lineStyle(this.thickness,c,1,.5,false);let x=radius*Math.cos(angle*Math.PI/180);let y=radius*Math.sin(angle*Math.PI/180);this.lines.moveTo(x0+x,y0+y);angle+=angleStep;for(let i=0;i<n;i++){x=radius*Math.cos(angle*Math.PI/180);y=radius*Math.sin(angle*Math.PI/180);this.lines.lineTo(x0+x,y0+y);angle+=angleStep}}clear(){this.lines.clear()}}async function init(){const renderer=PIXI.autoDetectRenderer(300,300,{backgroundColor:0,antialias:true,resolution:1});renderer.view.width=300;renderer.view.height=300;document.body.appendChild(renderer.view);const stage=new PIXI.Container;await initBox2D();const{b2_dynamicBody,b2BodyDef,b2CircleShape,b2PolygonShape,b2Vec2,b2World}=box2d;const world=new b2World;const gravity=new b2Vec2(0,9.8);world.SetGravity(gravity);const pixelsPerMeter=30;const debugDrawer=new DebugDrawer(stage,pixelsPerMeter);world.SetDebugDraw(debugDrawer.instance);const groundBodyDef=new b2BodyDef;groundBodyDef.set_position(new b2Vec2(150/pixelsPerMeter,270/pixelsPerMeter));const groundBody=world.CreateBody(groundBodyDef);const groundShape=new b2PolygonShape;groundShape.SetAsBox(130/pixelsPerMeter,20/pixelsPerMeter);groundBody.CreateFixture(groundShape,0);const boxBodyDef=new b2BodyDef;boxBodyDef.set_position(new b2Vec2(100/pixelsPerMeter,30/pixelsPerMeter));boxBodyDef.angle=30*Math.PI/180;boxBodyDef.type=b2_dynamicBody;const boxBody=world.CreateBody(boxBodyDef);const boxShape=new b2PolygonShape;boxShape.SetAsBox(30/pixelsPerMeter,30/pixelsPerMeter);boxBody.CreateFixture(boxShape,1);const circleBodyDef=new b2BodyDef;circleBodyDef.type=b2_dynamicBody;circleBodyDef.position=new b2Vec2(200/pixelsPerMeter,50/pixelsPerMeter);const circleRigidBody=world.CreateBody(circleBodyDef);const circleShape=new b2CircleShape;circleShape.m_radius=20/pixelsPerMeter;const circleFixture=circleRigidBody.CreateFixture(circleShape,1);circleFixture.SetRestitution(.5);const platformBodyDef=new b2BodyDef;platformBodyDef.set_position(new b2Vec2(220/pixelsPerMeter,200/pixelsPerMeter));platformBodyDef.angle=-20*Math.PI/180;const platformBody=world.CreateBody(platformBodyDef);const platformShape=new b2PolygonShape;platformShape.SetAsBox(50/pixelsPerMeter,5/pixelsPerMeter);platformBody.CreateFixture(platformShape,0);let currentTime,lastTime,dt;function render(){requestAnimationFrame(render);currentTime=Date.now();dt=(currentTime-lastTime)/1e3;lastTime=currentTime;world.Step(dt,3,2);world.DebugDraw();renderer.render(stage);debugDrawer.clear()}lastTime=Date.now();render()}init();