import"oimo-physics";import{mat4,vec3,quat}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader));return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader));return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}function getSpriteInfo(atlasJson,spriteNames){const atlasW=atlasJson.meta.size.w;const atlasH=atlasJson.meta.size.h;const vertPositions=[];const texCoords=[];const spriteSizes=[];for(let i=0;i<spriteNames.length;i++){vertPositions.push(-.5,.5,-.5,-.5,.5,.5,.5,-.5);const tx=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["x"])/atlasW;const ty=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["y"])/atlasH;const tw=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"])/atlasW;const th=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"])/atlasH;texCoords.push(tx,ty,tx,ty+th,tx+tw,ty,tx+tw,ty+th);const spriteW=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"]);const spriteH=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"]);spriteSizes.push({w:spriteW,h:spriteH})}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoords),gl.STATIC_DRAW);const result={vertPosBuffer:vertPosBuffer,texCoordBuffer:texCoordBuffer,spriteSizes:spriteSizes};return result}async function initVertexBuffers(path,modelNames){const vertexBuffers={};for(let i=0;i<modelNames.length;i++){const contentResponse=await fetch(path+modelNames[i]+".dae");const content=await contentResponse.text();const parser=new DOMParser;const xmlDoc=parser.parseFromString(content,"text/xml");const expForIndexes="//*[local-name() = 'p']/text()";let nodes=xmlDoc.evaluate(expForIndexes,xmlDoc,null,XPathResult.ANY_TYPE,null);let result=nodes.iterateNext();const order=result.textContent.trim().split(" ").map(value=>{return parseInt(value)});const partOfPositionsId="mesh-positions-array";const expForPositions=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfPositionsId}') + 1) = '${partOfPositionsId}']`;nodes=xmlDoc.evaluate(expForPositions,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const positions=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfNormalsId="mesh-normals-array";const expForNormals=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfNormalsId}') + 1) = '${partOfNormalsId}']`;nodes=xmlDoc.evaluate(expForNormals,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const normals=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfTexCoordsId="mesh-map-0-array";const expForTexCoords=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfTexCoordsId}') + 1) = '${partOfTexCoordsId}']`;nodes=xmlDoc.evaluate(expForTexCoords,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const texCoords=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const correctionMatrix=mat4.create();mat4.fromXRotation(correctionMatrix,-Math.PI/2);const vertPosResult=[];const normalsResult=[];const texCoordsResult=[];const amountOfTriangles=order.length/9;for(let i=0;i<amountOfTriangles;i++){for(let j=0;j<9;j++){if((i*9+j)%3===0){const vx=positions[order[i*9+j]*3+0];const vy=positions[order[i*9+j]*3+1];const vz=positions[order[i*9+j]*3+2];const oldPos=vec3.fromValues(vx,vy,vz);const newPos=vec3.create();vec3.transformMat4(newPos,oldPos,correctionMatrix);vertPosResult.push(newPos[0]);vertPosResult.push(newPos[1]);vertPosResult.push(newPos[2])}else if((i*9+j)%3===1){const nx=normals[order[i*9+j]*3+0];const ny=normals[order[i*9+j]*3+1];const nz=normals[order[i*9+j]*3+2];const oldNormal=vec3.fromValues(nx,ny,nz);const newNormal=vec3.create();vec3.transformMat4(newNormal,oldNormal,correctionMatrix);normalsResult.push(newNormal[0]);normalsResult.push(newNormal[1]);normalsResult.push(newNormal[2])}else if((i*9+j)%3===2){texCoordsResult.push(texCoords[order[i*9+j]*2+0]);texCoordsResult.push(texCoords[order[i*9+j]*2+1])}}}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPosResult),gl.STATIC_DRAW);const normalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,normalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalsResult),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoordsResult),gl.STATIC_DRAW);const buffers={vertPosBuffer:vertPosBuffer,normalBuffer:normalBuffer,texCoordBuffer:texCoordBuffer,amountOfVertices:vertPosResult.length/3};vertexBuffers[modelNames[i]]=buffers}return vertexBuffers}function loadTexture(url,minType=gl.NEAREST,magType=gl.NEAREST){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magType);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}class DebugDrawer extends OIMO.DebugDraw{constructor(edge){super();this.edge=edge;this.projViewMatrix=null;this.centerX=0;this.centerY=0;this.centerZ=0;this.length=0;this.vec=vec3.create();this.x=0;this.y=0;this.z=0;this.unitX=vec3.fromValues(1,0,0)}point(v,color){console.log("point")}triangle(v1,v2,v3,n1,n2,n3,color){console.log("triangle")}line(from,to,color){this.edge.color[0]=color.x;this.edge.color[1]=color.y;this.edge.color[2]=color.z;if(from.x>to.x){this.centerX=to.x+Math.abs(from.x-to.x)/2}else{this.centerX=from.x+Math.abs(to.x-from.x)/2}if(from.y>to.y){this.centerY=to.y+Math.abs(from.y-to.y)/2}else{this.centerY=from.y+Math.abs(to.y-from.y)/2}if(from.z>to.z){this.centerZ=to.z+Math.abs(from.z-to.z)/2}else{this.centerZ=from.z+Math.abs(to.z-from.z)/2}this.vec[0]=to.x-from.x;this.vec[1]=to.y-from.y;this.vec[2]=to.z-from.z;this.length=vec3.length(this.vec);vec3.normalize(this.vec,this.vec);quat.rotationTo(this.edge.rotation,this.unitX,this.vec);this.edge.scale=[this.length,1,1];this.edge.position=[this.centerX,this.centerY,this.centerZ];this.edge.draw(this.projViewMatrix)}}class Lightless{constructor(program,vertexBuffers){this.program=program;this.vertexBuffers=vertexBuffers;this.color=[1,0,0];this.position=vec3.fromValues(0,0,0);this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation)}draw(projViewMatrix){mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.useProgram(this.program);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,this.color);this.bind();gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}class RayCaster{constructor(cube){this.cube=cube;this.projViewMatrix=null;this.fromX=0;this.fromY=0;this.fromZ=0;this.toX=0;this.toY=0;this.toZ=0;this.centerX=0;this.centerY=0;this.centerZ=0;this.length=0;this.vec=vec3.create();this.x=0;this.y=0;this.z=0;this.unitX=vec3.fromValues(1,0,0)}drawLine(from,to,thickness=.5){this.fromX=from[0];this.fromY=from[1];this.fromZ=from[2];this.toX=to[0];this.toY=to[1];this.toZ=to[2];if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}if(this.fromZ>this.toZ){this.centerZ=this.toZ+Math.abs(this.fromZ-this.toZ)/2}else{this.centerZ=this.fromZ+Math.abs(this.toZ-this.fromZ)/2}this.vec[0]=this.toX-this.fromX;this.vec[1]=this.toY-this.fromY;this.vec[2]=this.toZ-this.fromZ;this.length=vec3.length(this.vec);vec3.normalize(this.vec,this.vec);quat.rotationTo(this.cube.rotation,this.unitX,this.vec);this.cube.scale=[this.length,thickness,thickness];this.cube.position=[this.centerX,this.centerY,this.centerZ];this.cube.draw(this.projViewMatrix)}}class Sprite{constructor(program,spriteNames,spriteInfo,aPositionLocation,aTexCoordLocation,uMvpMatrixLocation,texture){this.program=program;this.spriteNames=spriteNames;this.vertPosBuffer=spriteInfo.vertPosBuffer;this.texCoordBuffer=spriteInfo.texCoordBuffer;this.aPositionLocation=aPositionLocation;this.aTexCoordLocation=aTexCoordLocation;this.uMvpMatrixLocation=uMvpMatrixLocation;this.texture=texture;this.drawingIndex=0;this.spriteSizes=spriteInfo.spriteSizes;this.x=0;this.y=0;this.w=this.spriteSizes[0].w;this.h=this.spriteSizes[0].h;this.modelMatrix=mat4.create();this.mvpMatrix=mat4.create()}setPosition(x,y){this.x=x;this.y=y}setSize(w,h){this.w=w;this.h=h}setTextureRect(spriteName){const index=this.spriteNames.indexOf(spriteName);this.w=this.spriteSizes[index].w;this.h=this.spriteSizes[index].h;this.drawingIndex=index*4}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){this.bind();mat4.fromTranslation(this.modelMatrix,[this.x,this.y,0]);mat4.scale(this.modelMatrix,this.modelMatrix,[this.w,this.h,1]);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.useProgram(this.program);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,this.drawingIndex,4);gl.bindTexture(gl.TEXTURE_2D,null)}}let playerRigidBody,raycaster;let vertexBuffers,debugDrawer;const keyboard=new Keyboard;const linearSpeed=2e3;let sprite;const spriteNames=["mario_idle.png","mario_run_0.png","mario_run_1.png","mario_run_2.png","mario_jump.png","simple_level.png"];let playerAnimationIndex=0;const playerRunAnimations=["mario_run_0.png","mario_run_1.png","mario_run_2.png"];const playerStates={idle:0,run:1,jump:2};let currentPlayerState=playerStates.jump;const projMatrix=mat4.create();mat4.ortho(projMatrix,-64,64,-64,64,50,-50);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,50],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const world=new OIMO.World;world.setGravity(new OIMO.Vec3(0,-100,0));let colliderEdge;let groundedLeft=false;let groundedRight=false;const rayCastCallback=new OIMO.RayCastCallback;const rayCastClosest=new OIMO.RayCastClosest;const showCollidersCheckbox=document.getElementById("colliderCheckBox");let showColliders=showCollidersCheckbox.checked;showCollidersCheckbox.onchange=()=>{showColliders=showCollidersCheckbox.checked};const showRaysCheckbox=document.getElementById("rayCheckBox");let showRays=showRaysCheckbox.checked;showRaysCheckbox.onchange=()=>{showRays=showRaysCheckbox.checked};let currentAnimTime=0;const animInterval=.1;const maxTimeStepMs=1/60*1e3;const directions={left:-1,right:1};let currentDir=directions.left;document.onkeydown=event=>{if(event.repeat)return;if((keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp"))&&(groundedLeft||groundedRight)){currentPlayerState=playerStates.jump}if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){currentDir=directions.left}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){currentDir=directions.right}};function step(deltaMs){const dt=Math.min(deltaMs,maxTimeStepMs);if((keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp"))&&(groundedLeft||groundedRight)){const vel=playerRigidBody.getLinearVelocity();vel.y=100;playerRigidBody.setLinearVelocity(vel)}if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(-1*linearSpeed*dt/1e3,vy,0);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(1*linearSpeed*dt/1e3,vy,0);playerRigidBody.setLinearVelocity(impulse)}world.step(dt/1e3)}function updateRays(){if(showRays){raycaster.drawLine(vec3.fromValues(sprite.x,sprite.y+5,0),vec3.fromValues(sprite.x,sprite.y+12,0))}let begin=new OIMO.Vec3(sprite.x,sprite.y+5,0);let end=new OIMO.Vec3(sprite.x,sprite.y+12,0);world.rayCast(begin,end,rayCastCallback);if(showRays){raycaster.drawLine(vec3.fromValues(sprite.x-5,sprite.y-5,0),vec3.fromValues(sprite.x-5,sprite.y-12,0))}begin=new OIMO.Vec3(sprite.x-5,sprite.y-5,0);end=new OIMO.Vec3(sprite.x-5,sprite.y-12,0);world.rayCast(begin,end,rayCastClosest);if(rayCastClosest.hit){groundedLeft=true}else{groundedLeft=false}rayCastClosest.clear();if(showRays){raycaster.drawLine(vec3.fromValues(sprite.x+5,sprite.y-5,0),vec3.fromValues(sprite.x+5,sprite.y-12,0))}begin=new OIMO.Vec3(sprite.x+5,sprite.y-5,0);end=new OIMO.Vec3(sprite.x+5,sprite.y-12,0);world.rayCast(begin,end,rayCastClosest);if(rayCastClosest.hit){groundedRight=true}else{groundedRight=false}rayCastClosest.clear()}function draw(dt){gl.clear(gl.COLOR_BUFFER_BIT);sprite.setTextureRect("simple_level.png");sprite.setPosition(0,0);sprite.draw(projViewMatrix);switch(currentPlayerState){case playerStates.idle:sprite.setTextureRect("mario_idle.png");break;case playerStates.jump:sprite.setTextureRect("mario_jump.png");break;case playerStates.run:currentAnimTime+=dt;if(currentAnimTime>=animInterval){currentAnimTime=0;playerAnimationIndex++;if(playerAnimationIndex>=playerRunAnimations.length){playerAnimationIndex=0}}sprite.setTextureRect(playerRunAnimations[playerAnimationIndex]);break}sprite.w=currentDir*sprite.w;sprite.setPosition(playerRigidBody.getPosition().x,playerRigidBody.getPosition().y);sprite.draw(projViewMatrix);updateRays();if(groundedLeft||groundedRight){const vel=playerRigidBody.getLinearVelocity();if(Math.abs(vel.x)<1){currentPlayerState=playerStates.idle}else{currentPlayerState=playerStates.run}}else{currentPlayerState=playerStates.jump}if(showColliders){world.debugDraw()}}async function init(){if(!initWebGLContext("renderCanvas"))return;gl.clearColor(.2,.2,.2,1);gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);const textureProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");if(!textureProgram)return;const aPositionLocation=gl.getAttribLocation(textureProgram,"aPosition");const aTexCoordLocation=gl.getAttribLocation(textureProgram,"aTexCoord");const uMvpMatrixLocation=gl.getUniformLocation(textureProgram,"uMvpMatrix");const texturePath="assets/sprites/texture.png";const texture=await loadTexture(texturePath);const textureResponse=await fetch("assets/sprites/texture.json");const textureContent=await textureResponse.text();const atlasJson=JSON.parse(textureContent);const spriteInfo=getSpriteInfo(atlasJson,spriteNames);sprite=new Sprite(textureProgram,spriteNames,spriteInfo,aPositionLocation,aTexCoordLocation,uMvpMatrixLocation,texture);const groundPosition=vec3.create();const groundScale=vec3.create();const pipePosition=vec3.create();const pipeScale=vec3.create();const bricksPosition=vec3.create();const bricksScale=vec3.create();const levelResponse=await fetch("assets/levels/simple-level.json");const levelContent=JSON.parse(await levelResponse.text());const layers=levelContent.layers;for(let i=0;i<layers.length;i++){if(layers[i].name==="Colliders"){const objects=layers[i].objects;for(let i=0;i<objects.length;i++){const x=objects[i].x;const y=objects[i].y;const w=objects[i].width;const h=objects[i].height;if(objects[i].name==="ground"){groundPosition[0]=0;groundPosition[1]=-48;groundScale[0]=w;groundScale[1]=h;groundScale[2]=20}else if(objects[i].name==="pipe"){pipePosition[0]=-x*2;pipePosition[1]=-y/4;pipeScale[0]=w;pipeScale[1]=h;pipeScale[2]=20}else if(objects[i].name==="bricks"){bricksPosition[0]=x/2;bricksPosition[1]=8;bricksScale[0]=w;bricksScale[1]=h;bricksScale[2]=20}}}}vertexBuffers=await initVertexBuffers("assets/models/",["cube_1x1"]);const lightlessProgram=await createProgram("assets/shaders/","lightless.vert","lightless.frag");if(!lightlessProgram)return;colliderEdge=new Lightless(lightlessProgram,vertexBuffers["cube_1x1"],vec3.fromValues(0,1,0));debugDrawer=new DebugDrawer(colliderEdge);debugDrawer.wireframe=true;world.setDebugDraw(debugDrawer);debugDrawer.projViewMatrix=projViewMatrix;const ray=new Lightless(lightlessProgram,vertexBuffers["cube_1x1"]);raycaster=new RayCaster(ray);raycaster.projViewMatrix=projViewMatrix;const playerRBConfig=new OIMO.RigidBodyConfig;playerRBConfig.type=OIMO.RigidBodyType.DYNAMIC;const playerPosition=vec3.fromValues(0,0,0);playerRBConfig.position=new OIMO.Vec3(playerPosition[0],playerPosition[1],playerPosition[2]);playerRigidBody=new OIMO.RigidBody(playerRBConfig);playerRigidBody.setOrientation(new OIMO.Quat(0,0,0,1));const playerShapeConfig=new OIMO.ShapeConfig;playerShapeConfig.geometry=new OIMO.SphereGeometry(16/2);playerShapeConfig.friction=1;playerRigidBody.addShape(new OIMO.Shape(playerShapeConfig));playerRigidBody.setRotationFactor(new OIMO.Vec3(0,0,0));world.addRigidBody(playerRigidBody);const groundRBConfig=new OIMO.RigidBodyConfig;groundRBConfig.type=OIMO.RigidBodyType.STATIC;groundRBConfig.position=new OIMO.Vec3(groundPosition[0],groundPosition[1],groundPosition[2]);const groundRigidBody=new OIMO.RigidBody(groundRBConfig);const groundShapeConfig=new OIMO.ShapeConfig;groundShapeConfig.geometry=new OIMO.BoxGeometry(new OIMO.Vec3(groundScale[0]/2,groundScale[1]/2,groundScale[2]/2));groundShapeConfig.friction=1;const groundShape=new OIMO.Shape(groundShapeConfig);groundRigidBody.addShape(groundShape);world.addRigidBody(groundRigidBody);const pipeRBConfig=new OIMO.RigidBodyConfig;pipeRBConfig.type=OIMO.RigidBodyType.STATIC;pipeRBConfig.position=new OIMO.Vec3(pipePosition[0],pipePosition[1],pipePosition[2]);const pipeRigidBody=new OIMO.RigidBody(pipeRBConfig);const pipeShapeConfig=new OIMO.ShapeConfig;pipeShapeConfig.geometry=new OIMO.BoxGeometry(new OIMO.Vec3(pipeScale[0]/2,pipeScale[1]/2,pipeScale[2]/2));pipeShapeConfig.friction=1;const pipeShape=new OIMO.Shape(pipeShapeConfig);pipeRigidBody.addShape(pipeShape);world.addRigidBody(pipeRigidBody);const bricksRBConfig=new OIMO.RigidBodyConfig;bricksRBConfig.type=OIMO.RigidBodyType.STATIC;bricksRBConfig.position=new OIMO.Vec3(bricksPosition[0],bricksPosition[1],bricksPosition[2]);const bricksRigidBody=new OIMO.RigidBody(bricksRBConfig);const bricksShapeConfig=new OIMO.ShapeConfig;bricksShapeConfig.geometry=new OIMO.BoxGeometry(new OIMO.Vec3(bricksScale[0]/2,bricksScale[1]/2,bricksScale[2]/2));bricksShapeConfig.friction=1;const bricksShape=new OIMO.Shape(bricksShapeConfig);bricksShape.userData={name:"bricks"};bricksRigidBody.addShape(bricksShape);world.addRigidBody(bricksRigidBody);rayCastCallback.process=(shape,hit)=>{if(shape.userData.name==="bricks"){console.log("bricks")}};(function animationLoop(prevMs){const nowMs=window.performance.now();window.requestAnimationFrame(animationLoop.bind(null,nowMs));const deltaMs=nowMs-prevMs;step(deltaMs);draw(deltaMs/1e3)})(window.performance.now())}init();