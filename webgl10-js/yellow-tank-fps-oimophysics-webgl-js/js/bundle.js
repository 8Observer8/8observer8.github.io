import"oimo-physics";import{vec3,quat,mat4,vec4}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}class DebugDrawer extends OIMO.DebugDraw{constructor(edge){super();this.edge=edge;this.projViewMatrix=null;this.centerX=0;this.centerY=0;this.centerZ=0;this.length=0;this.vec=vec3.create();this.x=0;this.y=0;this.z=0;this.unitX=vec3.fromValues(1,0,0)}point(v,color){console.log("point")}triangle(v1,v2,v3,n1,n2,n3,color){}line(from,to,color){this.edge.color[0]=color.x;this.edge.color[1]=color.y;this.edge.color[2]=color.z;if(from.x>to.x){this.centerX=to.x+Math.abs(from.x-to.x)/2}else{this.centerX=from.x+Math.abs(to.x-from.x)/2}if(from.y>to.y){this.centerY=to.y+Math.abs(from.y-to.y)/2}else{this.centerY=from.y+Math.abs(to.y-from.y)/2}if(from.z>to.z){this.centerZ=to.z+Math.abs(from.z-to.z)/2}else{this.centerZ=from.z+Math.abs(to.z-from.z)/2}this.vec[0]=to.x-from.x;this.vec[1]=to.y-from.y;this.vec[2]=to.z-from.z;this.length=vec3.length(this.vec);vec3.normalize(this.vec,this.vec);quat.rotationTo(this.edge.rotation,this.unitX,this.vec);this.edge.scale=[this.length,.05,.05];this.edge.position=[this.centerX,this.centerY,this.centerZ];this.edge.draw(this.projViewMatrix)}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}class AbstractObject{constructor(program,vertexBuffers){this.program=program;this.vertexBuffers=vertexBuffers;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.normalMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.aNormalLocation=gl.getAttribLocation(program,"aNormal");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uModelMatrixLocation=gl.getUniformLocation(program,"uModelMatrix");this.uNormalMatrixLocation=gl.getUniformLocation(program,"uNormalMatrix")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.normalBuffer);gl.vertexAttribPointer(this.aNormalLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aNormalLocation)}draw(projViewMatrix){gl.useProgram(this.program);mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniformMatrix4fv(this.uModelMatrixLocation,false,this.modelMatrix);mat4.invert(this.normalMatrix,this.modelMatrix);mat4.transpose(this.normalMatrix,this.normalMatrix);gl.uniformMatrix4fv(this.uNormalMatrixLocation,false,this.normalMatrix)}}class Object3DWithTexture extends AbstractObject{constructor(program,vertexBuffers,texture){super(program,vertexBuffers);this.texture=texture;this.aTexCoordLocation=gl.getAttribLocation(program,"aTexCoord")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){super.bind();this.bind();super.draw(projViewMatrix);gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}class LightlessObject{constructor(program,vertexBuffers){this.program=program;this.vertexBuffers=vertexBuffers;this.color=[1,0,0];this.position=vec3.fromValues(0,0,0);this.rotation=quat.create();this.scale=vec3.fromValues(1,1,1);this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();gl.useProgram(program);this.aPositionLocation=gl.getAttribLocation(program,"aPosition");this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor")}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffers.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,3,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation)}draw(projViewMatrix){gl.useProgram(this.program);mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,this.color);this.bind();gl.drawArrays(gl.TRIANGLES,0,this.vertexBuffers.amountOfVertices)}}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${fragShaderFileName}: ${gl.getShaderInfoLog(vShader)}`);return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log(`${vertShaderFileName}: ${gl.getShaderInfoLog(fShader)}`);return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log(`Link error with shaders ${vertShaderFileName}`+` and ${fragShaderFileName}`);console.log(gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}async function initVertexBuffers(path,modelNames){const vertexBuffers={};for(let i=0;i<modelNames.length;i++){const contentResponse=await fetch(path+modelNames[i]+".dae");const content=await contentResponse.text();const parser=new DOMParser;const xmlDoc=parser.parseFromString(content,"text/xml");const expForIndexes="//*[local-name() = 'p']/text()";let nodes=xmlDoc.evaluate(expForIndexes,xmlDoc,null,XPathResult.ANY_TYPE,null);let result=nodes.iterateNext();const order=result.textContent.trim().split(" ").map(value=>{return parseInt(value)});const partOfPositionsId="mesh-positions-array";const expForPositions=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfPositionsId}') + 1) = '${partOfPositionsId}']`;nodes=xmlDoc.evaluate(expForPositions,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const positions=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfNormalsId="mesh-normals-array";const expForNormals=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfNormalsId}') + 1) = '${partOfNormalsId}']`;nodes=xmlDoc.evaluate(expForNormals,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const normals=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const partOfTexCoordsId="mesh-map-0-array";const expForTexCoords=`//*[local-name() = 'float_array'][substring(@id, string-length(@id) -`+`string-length('${partOfTexCoordsId}') + 1) = '${partOfTexCoordsId}']`;nodes=xmlDoc.evaluate(expForTexCoords,xmlDoc,null,XPathResult.ANY_TYPE,null);result=nodes.iterateNext();const texCoords=result.textContent.trim().split(" ").map(value=>{return parseFloat(value)});const correctionMatrix=mat4.create();mat4.fromXRotation(correctionMatrix,-Math.PI/2);const vertPosResult=[];const normalsResult=[];const texCoordsResult=[];const amountOfTriangles=order.length/9;for(let i=0;i<amountOfTriangles;i++){for(let j=0;j<9;j++){if((i*9+j)%3===0){const vx=positions[order[i*9+j]*3+0];const vy=positions[order[i*9+j]*3+1];const vz=positions[order[i*9+j]*3+2];const oldPos=vec3.fromValues(vx,vy,vz);const newPos=vec3.create();vec3.transformMat4(newPos,oldPos,correctionMatrix);vertPosResult.push(newPos[0]);vertPosResult.push(newPos[1]);vertPosResult.push(newPos[2])}else if((i*9+j)%3===1){const nx=normals[order[i*9+j]*3+0];const ny=normals[order[i*9+j]*3+1];const nz=normals[order[i*9+j]*3+2];const oldNormal=vec3.fromValues(nx,ny,nz);const newNormal=vec3.create();vec3.transformMat4(newNormal,oldNormal,correctionMatrix);normalsResult.push(newNormal[0]);normalsResult.push(newNormal[1]);normalsResult.push(newNormal[2])}else if((i*9+j)%3===2){texCoordsResult.push(texCoords[order[i*9+j]*2+0]);texCoordsResult.push(texCoords[order[i*9+j]*2+1])}}}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPosResult),gl.STATIC_DRAW);const normalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,normalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalsResult),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoordsResult),gl.STATIC_DRAW);const buffers={vertPosBuffer:vertPosBuffer,normalBuffer:normalBuffer,texCoordBuffer:texCoordBuffer,amountOfVertices:vertPosResult.length/3};vertexBuffers[modelNames[i]]=buffers}return vertexBuffers}function loadTexture(path,minType=gl.LINEAR,magType=gl.LINEAR){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magType);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=path})}let defaultProgram,edgeProgram;let player,floor,edge,topRoad,tank;let debugDrawer,keyboard;let debugMode=false;const angularSpeed=200;const linearSpeed=150;let deltaTime,currentTime,lastTime;let vertexBuffers;const lightPosition=vec3.fromValues(2,5,3);const forward=vec3.fromValues(0,0,1);const zUnit=vec3.fromValues(0,0,1);const playerRotation=quat.create();quat.rotationTo(playerRotation,zUnit,forward);const direction=vec3.fromValues(forward[0],forward[1],forward[2]);const pitchForward=vec3.create();const forwardTrans=vec4.create();const dist=vec4.create();const cross=vec3.create();let cameraAngle=0;const lowLimitOfAngle=-80;const highLimitOfAngle=80;const cameraSpeed=50;const projMatrix=mat4.create();const viewMatrix=mat4.create();const projViewMatrix=mat4.create();const world=new OIMO.World;world.setGravity(new OIMO.Vec3(0,-9.80665,0));const pos=[[0,-.1,-0],[-4.1028,.632,1.898],[-4.1028,1.3637,-1.5373],[-.6353,1.3777,-3.4865],[0,.4829,-.3547]];const rot=[[0,0,-0,1],[.3111,0,-0,.9504],[0,0,-0,1],[0,0,-0,1],[0,0,-0,1]];const scale=[[5,.1,5],[.6513,.1,1.2664],[.6513,.1,2.5073],[4.0843,.1,.5283],[1.1292,.4747,1.1453]];for(let i=0;i<pos.length;i++){const staticObjRBConfig=new OIMO.RigidBodyConfig;staticObjRBConfig.type=OIMO.RigidBodyType.STATIC;staticObjRBConfig.position=new OIMO.Vec3(pos[i][0],pos[i][1],pos[i][2]);const staticObjRigidBody=new OIMO.RigidBody(staticObjRBConfig);staticObjRigidBody.setOrientation(new OIMO.Quat(rot[i][0],rot[i][1],rot[i][2],rot[i][3]));const staticObjShapeConfig=new OIMO.ShapeConfig;staticObjShapeConfig.geometry=new OIMO.BoxGeometry(new OIMO.Vec3(scale[i][0],scale[i][1],scale[i][2]));staticObjRigidBody.addShape(new OIMO.Shape(staticObjShapeConfig));world.addRigidBody(staticObjRigidBody)}const playerRBConfig=new OIMO.RigidBodyConfig;playerRBConfig.type=OIMO.RigidBodyType.DYNAMIC;playerRBConfig.position=new OIMO.Vec3(0,2,-3);const playerRigidBody=new OIMO.RigidBody(playerRBConfig);playerRigidBody.setRotationFactor(new OIMO.Vec3(0,1,0));playerRigidBody.setAngularDamping(10);playerRigidBody.setLinearDamping(3);const playerShapeConfig=new OIMO.ShapeConfig;const playerSize=.5;playerShapeConfig.geometry=new OIMO.SphereGeometry(playerSize);playerRigidBody.addShape(new OIMO.Shape(playerShapeConfig));world.addRigidBody(playerRigidBody);async function main(){if(!initWebGLContext("renderCanvas")){return}gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,true);const playerTexture=await loadTexture("assets/models/player.png");const floorTexture=await loadTexture("assets/models/static_env.png");const topRoadTexture=await loadTexture("assets/models/top-road.png");const tankTexture=await loadTexture("assets/models/yellow-tank-1.png");defaultProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");edgeProgram=await createProgram("assets/shaders/","lightless.vert","lightless.frag");vertexBuffers=await initVertexBuffers("assets/models/",["player","static_env","cube","top-road","yellow-tank"]);edge=new LightlessObject(edgeProgram,vertexBuffers["cube"]);debugDrawer=new DebugDrawer(edge);debugDrawer.wireframe=true;world.setDebugDraw(debugDrawer);player=new Object3DWithTexture(defaultProgram,vertexBuffers["player"],playerTexture);floor=new Object3DWithTexture(defaultProgram,vertexBuffers["static_env"],floorTexture);topRoad=new Object3DWithTexture(defaultProgram,vertexBuffers["top-road"],topRoadTexture);tank=new Object3DWithTexture(defaultProgram,vertexBuffers["yellow-tank"],tankTexture);player.scale=[playerSize,playerSize,playerSize];init()}main();function init(){keyboard=new Keyboard;gl.enable(gl.DEPTH_TEST);gl.clearColor(.5,.6,.8,1);gl.useProgram(defaultProgram);const uLightPositionLocation=gl.getUniformLocation(defaultProgram,"uLightPosition");gl.uniform3fv(uLightPositionLocation,lightPosition);window.onresize=()=>{const w=gl.canvas.clientWidth;const h=gl.canvas.clientHeight;gl.canvas.width=w;gl.canvas.height=h;gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);mat4.perspective(projMatrix,55*Math.PI/180,w/h,.1,500);lastTime=Date.now();draw()};window.onresize(null);document.onkeydown=event=>{if(event.repeat)return;if(event.key==="b"){debugMode=!debugMode;if(debugMode){debugDrawer.debugMode=1}else{debugDrawer.debugMode=0}}}}function keyboardHandler(dt){if(keyboard.pressed("KeyW")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(direction[0]*linearSpeed*dt,vy,direction[2]*linearSpeed*dt);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyS")){const vy=playerRigidBody.getLinearVelocity().y;const impulse=new OIMO.Vec3(-direction[0]*linearSpeed*dt,vy,-direction[2]*linearSpeed*dt);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyA")){const vy=playerRigidBody.getLinearVelocity().y;vec3.cross(cross,[0,1,0],[forwardTrans[0],forwardTrans[1],forwardTrans[2]]);const impulse=new OIMO.Vec3(cross[0]*linearSpeed*dt,vy,cross[2]*linearSpeed*dt);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vy=playerRigidBody.getLinearVelocity().y;vec3.cross(cross,[0,1,0],[forwardTrans[0],forwardTrans[1],forwardTrans[2]]);const impulse=new OIMO.Vec3(-cross[0]*linearSpeed*dt,vy,-cross[2]*linearSpeed*dt);playerRigidBody.setLinearVelocity(impulse)}if(keyboard.pressed("ArrowUp")){cameraAngle-=cameraSpeed*dt;if(cameraAngle<lowLimitOfAngle){cameraAngle=lowLimitOfAngle}}if(keyboard.pressed("ArrowDown")){cameraAngle+=cameraSpeed*dt;if(cameraAngle>highLimitOfAngle){cameraAngle=highLimitOfAngle}}if(keyboard.pressed("ArrowLeft")){const impulse=new OIMO.Vec3(0,angularSpeed*dt,0);playerRigidBody.setAngularVelocity(impulse)}if(keyboard.pressed("ArrowRight")){const impulse=new OIMO.Vec3(0,-angularSpeed*dt,0);playerRigidBody.setAngularVelocity(impulse)}vec3.transformQuat(direction,forward,player.rotation)}function draw(){currentTime=Date.now();deltaTime=(currentTime-lastTime)/1e3;lastTime=currentTime;keyboardHandler(deltaTime);world.step(deltaTime);player.position[0]=playerRigidBody.getPosition().x;player.position[1]=playerRigidBody.getPosition().y;player.position[2]=playerRigidBody.getPosition().z;player.rotation[0]=playerRigidBody.getOrientation().x;player.rotation[1]=playerRigidBody.getOrientation().y;player.rotation[2]=playerRigidBody.getOrientation().z;player.rotation[3]=playerRigidBody.getOrientation().w;mat4.identity(viewMatrix);vec3.rotateX(pitchForward,forward,[0,0,0],cameraAngle*Math.PI/180);vec4.transformQuat(forwardTrans,[pitchForward[0],pitchForward[1],pitchForward[2],1],player.rotation);vec4.add(dist,[player.position[0],player.position[1],player.position[2],0],forwardTrans);mat4.lookAt(viewMatrix,[player.position[0],player.position[1]+.8,player.position[2]],[dist[0],dist[1]+.8,dist[2]],[0,1,0]);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);mat4.mul(projViewMatrix,projMatrix,viewMatrix);floor.draw(projViewMatrix);topRoad.draw(projViewMatrix);tank.draw(projViewMatrix);debugDrawer.projViewMatrix=projViewMatrix;if(debugMode){world.debugDraw()}requestAnimationFrame(draw)}