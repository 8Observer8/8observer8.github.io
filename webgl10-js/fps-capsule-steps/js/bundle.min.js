let world;const canvas=document.getElementById("renderCanvas");const gl=canvas.getContext("webgl");gl.clearColor(.9,.95,.92,1);gl.enable(gl.DEPTH_TEST);const vertShaderSource=`attribute vec4 aPosition;\n    attribute vec4 aNormal;\n    attribute vec2 aTexCoord;\n    uniform mat4 uMvpMatrix;\n    uniform mat4 uModelMatrix;\n    uniform mat4 uNormalMatrix;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vTexCoord;\n    void main()\n    {\n        gl_Position = uMvpMatrix * aPosition;\n        vPosition = vec3(uModelMatrix * aPosition);\n        vNormal = normalize(vec3(uNormalMatrix * aNormal));\n        vTexCoord = aTexCoord;\n    }`;const fragShaderSource=`precision mediump float;\n    const vec3 lightColor = vec3(1.0, 1.0, 1.0);\n    const float ambient = 0.2;\n    uniform sampler2D uSampler;\n    uniform vec3 uLightPosition;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vTexCoord;\n    void main()\n    {\n        vec4 color = texture2D(uSampler, vTexCoord);\n        vec3 normal = normalize(vNormal);\n        vec3 lightDirection = normalize(uLightPosition - vPosition);\n        float nDotL = max(dot(lightDirection, normal), ambient);\n        vec3 diffuse = lightColor * color.rgb * nDotL;\n        gl_FragColor = vec4(diffuse, color.a);\n    }`;const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader))}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader))}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.bindAttribLocation(program,0,"aPosition");gl.bindAttribLocation(program,1,"aNormal");gl.bindAttribLocation(program,2,"aTexCoord");gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program))}const edgeVertShaderSource=`attribute vec3 aPosition;\n    uniform mat4 uMvpMatrix;\n    void main()\n    {\n        gl_Position = uMvpMatrix * vec4(aPosition, 1.0);\n    }`;const edgeFragShaderSource=`precision mediump float;\n    void main()\n    {\n        gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n    }`;const vShaderForEdge=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShaderForEdge,edgeVertShaderSource);gl.compileShader(vShaderForEdge);ok=gl.getShaderParameter(vShaderForEdge,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShaderForEdge))}const fShaderForEdge=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShaderForEdge,edgeFragShaderSource);gl.compileShader(fShaderForEdge);ok=gl.getShaderParameter(vShaderForEdge,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShaderForEdge))}const programForEdge=gl.createProgram();gl.attachShader(programForEdge,vShaderForEdge);gl.attachShader(programForEdge,fShaderForEdge);gl.bindAttribLocation(programForEdge,0,"aPosition");gl.linkProgram(programForEdge);ok=gl.getProgramParameter(programForEdge,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(programForEdge))}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.key]=pressed}}class Object3D{constructor(program,imageId,gltf,binData,position){this.position=position;this.rotation=glMatrix.quat.create();this.scale=[1,1,1];const image=document.getElementById(imageId);this.texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,image);this.mvpMatrix=glMatrix.mat4.create();this.modelMatrix=glMatrix.mat4.create();this.normalMatrix=glMatrix.mat4.create();gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uModelMatrixLocation=gl.getUniformLocation(program,"uModelMatrix");this.uNormalMatrixLocation=gl.getUniformLocation(program,"uNormalMatrix");this.program=program;const posIndex=gltf.meshes[0].primitives[0].attributes.POSITION;const posBufferViewIndex=gltf.accessors[posIndex].bufferView;const posBufferView=gltf.bufferViews[posBufferViewIndex];const posByteOffset=posBufferView.byteOffset;const posByteLength=posBufferView.byteLength;const vertPosData=new Float32Array(binData,posByteOffset,posByteLength/Float32Array.BYTES_PER_ELEMENT);this.vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,vertPosData,gl.STATIC_DRAW);this.posAttribByteOffset=gltf.accessors[posIndex].byteOffset;this.posStride=posBufferView.byteStride;const normalIndex=gltf.meshes[0].primitives[0].attributes.NORMAL;const normalBufferViewIndex=gltf.accessors[normalIndex].bufferView;const normalBufferView=gltf.bufferViews[normalBufferViewIndex];const normalByteOffset=normalBufferView.byteOffset;const normalByteLength=normalBufferView.byteLength;const normalData=new Float32Array(binData,normalByteOffset,normalByteLength/Float32Array.BYTES_PER_ELEMENT);this.normalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.normalBuffer);gl.bufferData(gl.ARRAY_BUFFER,normalData,gl.STATIC_DRAW);this.normalAttribByteOffset=gltf.accessors[normalIndex].byteOffset;this.normalStride=normalBufferView.byteStride;const texCoordIndex=gltf.meshes[0].primitives[0].attributes.TEXCOORD_0;const texCoordBufferViewIndex=gltf.accessors[texCoordIndex].bufferView;const texCoordBufferView=gltf.bufferViews[texCoordBufferViewIndex];const texCoordByteOffset=texCoordBufferView.byteOffset;const texCoordByteLength=texCoordBufferView.byteLength;const texCoordData=new Float32Array(binData,texCoordByteOffset,texCoordByteLength/Float32Array.BYTES_PER_ELEMENT);this.texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,texCoordData,gl.STATIC_DRAW);this.texCoordAttribByteOffset=gltf.accessors[texCoordIndex].byteOffset;this.texCoordStride=texCoordBufferView.byteStride;const indicesIndex=gltf.meshes[0].primitives[0].indices;const indicesBufferViewIndex=gltf.accessors[indicesIndex].bufferView;const indicesBufferView=gltf.bufferViews[indicesBufferViewIndex];const indicesByteOffset=indicesBufferView.byteOffset;const indicesByteLength=indicesBufferView.byteLength;const indexData=new Uint16Array(binData,indicesByteOffset,indicesByteLength/2);this.indexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,indexData,gl.STATIC_DRAW);this.amountOfVertices=gltf.accessors[indicesIndex].count}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(0,3,gl.FLOAT,false,this.posStride,this.posAttribByteOffset);gl.enableVertexAttribArray(0);gl.bindBuffer(gl.ARRAY_BUFFER,this.normalBuffer);gl.vertexAttribPointer(1,3,gl.FLOAT,false,this.normalStride,this.normalAttribByteOffset);gl.enableVertexAttribArray(1);gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.vertexAttribPointer(2,2,gl.FLOAT,false,this.texCoordStride,this.texCoordAttribByteOffset);gl.enableVertexAttribArray(2);gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}draw(projViewMatrix){gl.useProgram(this.program);glMatrix.mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);glMatrix.mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniformMatrix4fv(this.uModelMatrixLocation,false,this.modelMatrix);glMatrix.mat4.invert(this.normalMatrix,this.modelMatrix);glMatrix.mat4.transpose(this.normalMatrix,this.normalMatrix);gl.uniformMatrix4fv(this.uNormalMatrixLocation,false,this.normalMatrix);this.bind();gl.drawElements(gl.TRIANGLES,this.amountOfVertices,gl.UNSIGNED_SHORT,0)}}class Edge{constructor(program,gltf,binData){this.position=[0,0,0];this.rotation=glMatrix.quat.create();this.scale=[.0025,.05,.0025];this.mvpMatrix=glMatrix.mat4.create();this.modelMatrix=glMatrix.mat4.create();gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.program=program;const posIndex=gltf.meshes[0].primitives[0].attributes.POSITION;const posBufferViewIndex=gltf.accessors[posIndex].bufferView;const posBufferView=gltf.bufferViews[posBufferViewIndex];const posByteOffset=posBufferView.byteOffset;const posByteLength=posBufferView.byteLength;const vertPosData=new Float32Array(binData,posByteOffset,posByteLength/Float32Array.BYTES_PER_ELEMENT);this.vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,vertPosData,gl.STATIC_DRAW);this.posAttribByteOffset=gltf.accessors[posIndex].byteOffset;this.posStride=posBufferView.byteStride;const indicesIndex=gltf.meshes[0].primitives[0].indices;const indicesBufferViewIndex=gltf.accessors[indicesIndex].bufferView;const indicesBufferView=gltf.bufferViews[indicesBufferViewIndex];const indicesByteOffset=indicesBufferView.byteOffset;const indicesByteLength=indicesBufferView.byteLength;const indexData=new Uint16Array(binData,indicesByteOffset,indicesByteLength/2);this.indexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,indexData,gl.STATIC_DRAW);this.amountOfVertices=gltf.accessors[indicesIndex].count}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(0,3,gl.FLOAT,false,this.posStride,this.posAttribByteOffset);gl.enableVertexAttribArray(0);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}draw(){gl.useProgram(this.program);glMatrix.mat4.fromRotationTranslationScale(this.modelMatrix,this.rotation,this.position,this.scale);glMatrix.mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniformMatrix4fv(this.uModelMatrixLocation,false,this.modelMatrix);gl.drawElements(gl.TRIANGLES,this.amountOfVertices,gl.UNSIGNED_SHORT,0)}}class DebugDrawer{constructor(edge){this.edge=edge;this.projViewMatrix=null;this.heap=null;this.debugDrawer=new Ammo.DebugDrawer;this.debugDrawer.drawLine=((from,to,color)=>{this.drawLine(from,to,color)}).bind(this);this.debugDrawer.setDebugMode=(()=>{});this.debugMode=1;this.debugDrawer.getDebugMode=(()=>{return this.debugMode});this.debugDrawer.setDebugMode(1);this.debugDrawer.drawContactPoint=((pointOnB,normalOnB,distance,lifeTime,color)=>{});this.debugDrawer.reportErrorWarning=(warningString=>{});this.debugDrawer.draw3dText=((location,textString)=>{});world.setDebugDrawer(this.debugDrawer);this.fromX=0;this.fromY=0;this.fromZ=0;this.toX=0;this.toY=0;this.toZ=0;this.centerX=0;this.centerY=0;this.centerZ=0}drawLine(from,to,color){this.heap=Ammo.HEAPF32;this.fromX=this.heap[(parseInt(from)+0)/4];this.fromY=this.heap[(parseInt(from)+4)/4];this.fromZ=this.heap[(parseInt(from)+8)/4];this.toX=this.heap[(parseInt(to)+0)/4];this.toY=this.heap[(parseInt(to)+4)/4];this.toZ=this.heap[(parseInt(to)+8)/4];if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}if(this.fromZ>this.toZ){this.centerZ=this.toZ+Math.abs(this.fromZ-this.toZ)/2}else{this.centerZ=this.fromZ+Math.abs(this.toZ-this.fromZ)/2}this.edge.position=[this.centerX,this.centerY,this.centerZ];this.edge.draw(this.projViewMatrix)}}class PhysicalObject extends Object3D{constructor(program,imageId,gltf,binData,position,rotation,shape,mass){super(program,imageId,gltf,binData,position);this.tempMotionState=null;this.tempTransform=new Ammo.btTransform;this.tempRotation=null;const initialPosition=new Ammo.btVector3(position[0],position[1],position[2]);const initialRotation=new Ammo.btQuaternion(rotation[0],rotation[1],rotation[2],rotation[3]);const transform=new Ammo.btTransform;transform.setIdentity();transform.setOrigin(initialPosition);transform.setRotation(initialRotation);const motionState=new Ammo.btDefaultMotionState(transform);const localInertia=new Ammo.btVector3(0,0,0);if(mass!==0){shape.calculateLocalInertia(mass,localInertia)}const rbInfo=new Ammo.btRigidBodyConstructionInfo(mass,motionState,shape,localInertia);this.body=new Ammo.btRigidBody(rbInfo);this.body.setActivationState(4);this.body.setFriction(1);this.body.setRollingFriction(1);world.addRigidBody(this.body)}update(){this.tempMotionState=this.body.getMotionState();if(this.tempMotionState){this.tempMotionState.getWorldTransform(this.tempTransform);this.position[0]=this.tempTransform.getOrigin().x();this.position[1]=this.tempTransform.getOrigin().y();this.position[2]=this.tempTransform.getOrigin().z();this.tempRotation=this.tempTransform.getRotation();this.rotation[0]=this.tempRotation.x();this.rotation[1]=this.tempRotation.y();this.rotation[2]=this.tempRotation.z();this.rotation[3]=this.tempRotation.w()}}}const projMatrix=glMatrix.mat4.create();window.onresize=(()=>{const w=canvas.clientWidth;const h=canvas.clientHeight;gl.canvas.width=w;gl.canvas.height=h;gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);glMatrix.mat4.perspective(projMatrix,55*Math.PI/180,w/h,.1,500)});window.onresize(null);const viewMatrix=glMatrix.mat4.create();const projViewMatrix=glMatrix.mat4.create();gl.useProgram(program);const lightPosition=glMatrix.vec3.fromValues(1,4,3);const uLightPositionLocation=gl.getUniformLocation(program,"uLightPosition");gl.uniform3fv(uLightPositionLocation,lightPosition);let player,ground,step0,step1,step2;const keyboard=new Keyboard;let debugDrawer,edge;main();async function main(){let response=await fetch("assets/player.gltf");let textResponse=await response.text();const playerJson=JSON.parse(textResponse);let binDataResponse=await fetch("assets/player0.bin");let blobResponse=await binDataResponse.blob();const playerBinData=await new Response(blobResponse).arrayBuffer();response=await fetch("assets/ground.gltf");textResponse=await response.text();const groundJson=JSON.parse(textResponse);binDataResponse=await fetch("assets/ground0.bin");blobResponse=await binDataResponse.blob();const groundBinData=await new Response(blobResponse).arrayBuffer();response=await fetch("assets/coloredCube.gltf");textResponse=await response.text();const edgeJson=JSON.parse(textResponse);binDataResponse=await fetch("assets/coloredCube0.bin");blobResponse=await binDataResponse.blob();const edgeBinData=await new Response(blobResponse).arrayBuffer();response=await fetch("assets/step.gltf");textResponse=await response.text();const stepJson=JSON.parse(textResponse);binDataResponse=await fetch("assets/step0.bin");blobResponse=await binDataResponse.blob();const stepBinData=await new Response(blobResponse).arrayBuffer();Ammo().then(()=>{const collisionConfiguration=new Ammo.btDefaultCollisionConfiguration;const dispatcher=new Ammo.btCollisionDispatcher(collisionConfiguration);const overlappingPairCache=new Ammo.btDbvtBroadphase;const solver=new Ammo.btSequentialImpulseConstraintSolver;world=new Ammo.btDiscreteDynamicsWorld(dispatcher,overlappingPairCache,solver,collisionConfiguration);world.setGravity(new Ammo.btVector3(0,-9.81,0));edge=new Edge(programForEdge,edgeJson,edgeBinData);debugDrawer=new DebugDrawer(edge);const playerShape=new Ammo.btCapsuleShape(.5,1);player=new PhysicalObject(program,"playerImage",playerJson,playerBinData,[0,1,0],[0,0,0,1],playerShape,1);player.body.setAngularFactor(0,1,0);player.body.setDamping(.9,.99);const stepShape=new Ammo.btBoxShape(new Ammo.btVector3(1.5,.1,2));step0=new PhysicalObject(program,"playerImage",stepJson,stepBinData,[1,1,0],[0,0,.216,.976],stepShape,0);step0.scale=[7.5,.5,1];step1=new PhysicalObject(program,"playerImage",stepJson,stepBinData,[3.8,1.65,0],[0,0,0,1],stepShape,0);step1.scale=[7.5,.5,1];step2=new PhysicalObject(program,"playerImage",stepJson,stepBinData,[3.8,2.5,-3.8],[.216,0,0,.976],stepShape,0);step2.scale=[7.5,.5,1];const groundShape=new Ammo.btBoxShape(new Ammo.btVector3(10,.5,10));ground=new PhysicalObject(program,"groundImage",groundJson,groundBinData,[0,0,0],[0,0,0,1],groundShape,0);createPhysicsSimulation();draw()})}function createPhysicsSimulation(){setInterval(()=>{updatePhysics()},15)}const angularSpeed=3;const linearSpeed=5;const forward=glMatrix.vec4.fromValues(0,0,-1,0);let forwardTrans=glMatrix.vec4.create();let dist=glMatrix.vec4.create();let fpsView=false;document.onkeydown=(event=>{if(event.repeat)return;if(event.key==="f"){fpsView=!fpsView}});function updatePhysics(){world.stepSimulation(.015,10);if(keyboard.pressed("ArrowLeft")||keyboard.pressed("a")){const impulse=new Ammo.btVector3(0,angularSpeed,0);player.body.setAngularVelocity(impulse)}if(keyboard.pressed("ArrowRight")||keyboard.pressed("d")){const impulse=new Ammo.btVector3(0,-angularSpeed,0);player.body.setAngularVelocity(impulse)}if(keyboard.pressed("ArrowUp")||keyboard.pressed("w")){const vy=player.body.getLinearVelocity().y();const impulse=new Ammo.btVector3(forwardTrans[0]*linearSpeed,vy,forwardTrans[2]*linearSpeed);player.body.setLinearVelocity(impulse)}if(keyboard.pressed("ArrowDown")||keyboard.pressed("s")){const vy=player.body.getLinearVelocity().y();const impulse=new Ammo.btVector3(-forwardTrans[0]*linearSpeed,vy,-forwardTrans[2]*linearSpeed);player.body.setLinearVelocity(impulse)}player.update();step0.update();step1.update();step2.update();ground.update();glMatrix.mat4.identity(viewMatrix);glMatrix.vec4.transformQuat(forwardTrans,forward,player.rotation);glMatrix.vec4.add(dist,[player.position[0],player.position[1],player.position[2],0],forwardTrans);if(fpsView){glMatrix.mat4.lookAt(viewMatrix,[player.position[0],player.position[1]+.8,player.position[2]],[dist[0],dist[1]+.8,dist[2]],[0,1,0]);debugDrawer.debugMode=0}else{glMatrix.mat4.lookAt(viewMatrix,[2,3,10],[0,0,0],[0,1,0]);debugDrawer.debugMode=1}}function draw(){requestAnimationFrame(()=>draw());gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);glMatrix.mat4.mul(projViewMatrix,projMatrix,viewMatrix);player.draw(projViewMatrix);step0.draw(projViewMatrix);step1.draw(projViewMatrix);step2.draw(projViewMatrix);ground.draw(projViewMatrix);debugDrawer.projViewMatrix=projViewMatrix;world.debugDrawWorld()}