import{b2Vec2,b2World,b2CircleShape,b2BodyType,b2PolygonShape,DrawShapes}from"@box2d/core";import{mat4,vec3,quat}from"gl-matrix";let gl=null;function initWebGLContext(canvasName){const canvas=document.getElementById(canvasName);if(canvas===null){console.log(`Failed to get a canvas element with the name "${canvasName}"`);return false}gl=canvas.getContext("webgl",{alpha:false,premultipliedAlpha:false});return true}async function createProgram(path,vertShaderFileName,fragShaderFileName){let response=await fetch(path+vertShaderFileName);const vertShaderSource=await response.text();response=await fetch(path+fragShaderFileName);const fragShaderSource=await response.text();const vShader=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vShader,vertShaderSource);gl.compileShader(vShader);let ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("vert: "+gl.getShaderInfoLog(vShader));return null}const fShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fShader,fragShaderSource);gl.compileShader(fShader);ok=gl.getShaderParameter(vShader,gl.COMPILE_STATUS);if(!ok){console.log("frag: "+gl.getShaderInfoLog(fShader));return null}const program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);ok=gl.getProgramParameter(program,gl.LINK_STATUS);if(!ok){console.log("link: "+gl.getProgramInfoLog(program));return null}gl.useProgram(program);return program}function getSpriteInfo(atlasJson,spriteNames){const atlasW=atlasJson.meta.size.w;const atlasH=atlasJson.meta.size.h;const vertPositions=[];const texCoords=[];const spriteSizes=[];for(let i=0;i<spriteNames.length;i++){vertPositions.push(-.5,.5,-.5,-.5,.5,.5,.5,-.5);const tx=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["x"])/atlasW;const ty=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["y"])/atlasH;const tw=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"])/atlasW;const th=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"])/atlasH;texCoords.push(tx,ty,tx,ty+th,tx+tw,ty,tx+tw,ty+th);const spriteW=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["w"]);const spriteH=parseInt(atlasJson.frames[spriteNames[i]]["frame"]["h"]);spriteSizes.push({w:spriteW,h:spriteH})}const vertPosBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertPosBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertPositions),gl.STATIC_DRAW);const texCoordBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(texCoords),gl.STATIC_DRAW);const result={vertPosBuffer:vertPosBuffer,texCoordBuffer:texCoordBuffer,spriteSizes:spriteSizes};return result}function loadTexture(url,minType=gl.NEAREST,magType=gl.NEAREST){return new Promise(resolve=>{const image=new Image;image.onload=()=>{const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minType);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magType);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);resolve(texture)};image.src=url})}class DebugDrawer{constructor(program,pixelsPerMeter){this.program=program;this.pixelsPerMeter=pixelsPerMeter;gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null;this.lineWidth=1;this.centerX=0;this.centerY=0;this.tempVec=vec3.create();this.fromX=0;this.fromY=0;this.toX=0;this.toY=0;this.length=0;this.position=vec3.create();this.rotation=quat.create();this.scale=vec3.create();this.color=vec3.create();this.unitX=vec3.fromValues(1,0,0);this.xf=vec3.create();this.radianOffset=0;this.quatMat=mat4.create();this.q=quat.create()}DrawSolidPolygon(vertices,vertexCount,color){gl.useProgram(this.program);gl.uniform3f(this.uColorLocation,color.r,color.g,color.b);this.drawLine(vertices[0],vertices[1]);this.drawLine(vertices[1],vertices[2]);this.drawLine(vertices[2],vertices[3]);this.drawLine(vertices[3],vertices[0])}drawLine(pointA,pointB){this.fromX=pointA.x*this.pixelsPerMeter;this.fromY=pointA.y*this.pixelsPerMeter;this.toX=pointB.x*this.pixelsPerMeter;this.toY=pointB.y*this.pixelsPerMeter;if(this.fromX>this.toX){this.centerX=this.toX+Math.abs(this.fromX-this.toX)/2}else{this.centerX=this.fromX+Math.abs(this.toX-this.fromX)/2}if(this.fromY>this.toY){this.centerY=this.toY+Math.abs(this.fromY-this.toY)/2}else{this.centerY=this.fromY+Math.abs(this.toY-this.fromY)/2}this.tempVec[0]=this.toX-this.fromX;this.tempVec[1]=this.toY-this.fromY;this.length=vec3.length(this.tempVec);vec3.normalize(this.tempVec,this.tempVec);this.position[0]=this.centerX;this.position[1]=this.centerY;this.position[2]=0;quat.rotationTo(this.rotation,this.unitX,this.tempVec);this.scale[0]=this.length;this.scale[1]=this.lineWidth;this.scale[2]=1;mat4.identity(this.modelMatrix);mat4.translate(this.modelMatrix,this.modelMatrix,[this.xf[0]*this.pixelsPerMeter,this.xf[1]*this.pixelsPerMeter,0]);quat.identity(this.q);quat.rotateZ(this.q,this.q,this.radianOffset);mat4.fromQuat(this.quatMat,this.q);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.translate(this.modelMatrix,this.modelMatrix,this.position);mat4.fromQuat(this.quatMat,this.rotation);mat4.mul(this.modelMatrix,this.modelMatrix,this.quatMat);mat4.scale(this.modelMatrix,this.modelMatrix,this.scale);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}PushTransform(xf){this.xf[0]=xf.p.x;this.xf[1]=xf.p.y;this.radianOffset=xf.q.s}PopTransform(xf){}DrawPolygon(vertices,vertexCount,color){}DrawCircle(center,radius,color){}DrawSolidCircle(center,radius,axis,color){gl.useProgram(this.program);gl.uniform3f(this.uColorLocation,color.r,color.g,color.b);const amountOfAngles=10;const angleStep=360/amountOfAngles;let startAngle=0;let endAngle=angleStep;for(let i=0;i<amountOfAngles;i++){const point0=new b2Vec2(radius*Math.cos(startAngle*Math.PI/180),radius*Math.sin(startAngle*Math.PI/180));const point1=new b2Vec2(radius*Math.cos(endAngle*Math.PI/180),radius*Math.sin(endAngle*Math.PI/180));this.drawLine(point0,point1);startAngle=endAngle;endAngle+=angleStep}}DrawSegment(p1,p2,color){}DrawTransform(xf){}DrawPoint(p,size,color){}}class Keyboard{constructor(){this.keys={};document.addEventListener("keydown",event=>{this.onKeyChange(event,true)},true);document.addEventListener("keyup",event=>{this.onKeyChange(event,false)},false)}pressed(key){return this.keys[key]}onKeyChange(event,pressed){this.keys[event.code]=pressed}}class RayCaster{constructor(program){this.program=program;gl.useProgram(program);this.uMvpMatrixLocation=gl.getUniformLocation(program,"uMvpMatrix");this.uColorLocation=gl.getUniformLocation(program,"uColor");this.mvpMatrix=mat4.create();this.modelMatrix=mat4.create();this.projViewMatrix=null}drawLine(from,to,color,thickness=1){gl.useProgram(this.program);const centerPoint=vec3.fromValues(from[0]+(to[0]-from[0])/2,from[1]+(to[1]-from[1])/2,0);const a=from[1]-to[1];const b=from[0]-to[0];const tan=a/b;const rad=Math.atan(tan);const v=vec3.fromValues(b,a,0);const length=vec3.length(v);mat4.fromTranslation(this.modelMatrix,centerPoint);mat4.rotateZ(this.modelMatrix,this.modelMatrix,rad);mat4.scale(this.modelMatrix,this.modelMatrix,[length,thickness,1]);mat4.mul(this.mvpMatrix,this.projViewMatrix,this.modelMatrix);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.uniform3fv(this.uColorLocation,color);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}}class Sprite{constructor(program,spriteNames,spriteInfo,aPositionLocation,aTexCoordLocation,uMvpMatrixLocation,texture){this.program=program;this.spriteNames=spriteNames;this.vertPosBuffer=spriteInfo.vertPosBuffer;this.texCoordBuffer=spriteInfo.texCoordBuffer;this.aPositionLocation=aPositionLocation;this.aTexCoordLocation=aTexCoordLocation;this.uMvpMatrixLocation=uMvpMatrixLocation;this.texture=texture;this.drawingIndex=0;this.spriteSizes=spriteInfo.spriteSizes;this.x=0;this.y=0;this.w=this.spriteSizes[0].w;this.h=this.spriteSizes[0].h;this.modelMatrix=mat4.create();this.mvpMatrix=mat4.create()}setPosition(x,y){this.x=x;this.y=y}setSize(w,h){this.w=w;this.h=h}setTextureRect(spriteName){const index=this.spriteNames.indexOf(spriteName);this.w=this.spriteSizes[index].w;this.h=this.spriteSizes[index].h;this.drawingIndex=index*4}bind(){gl.bindBuffer(gl.ARRAY_BUFFER,this.vertPosBuffer);gl.vertexAttribPointer(this.aPositionLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aPositionLocation);gl.bindBuffer(gl.ARRAY_BUFFER,this.texCoordBuffer);gl.vertexAttribPointer(this.aTexCoordLocation,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(this.aTexCoordLocation);gl.bindTexture(gl.TEXTURE_2D,this.texture)}draw(projViewMatrix){gl.useProgram(this.program);this.bind();mat4.fromTranslation(this.modelMatrix,[this.x,this.y,0]);mat4.scale(this.modelMatrix,this.modelMatrix,[this.w,this.h,1]);mat4.mul(this.mvpMatrix,projViewMatrix,this.modelMatrix);gl.useProgram(this.program);gl.uniformMatrix4fv(this.uMvpMatrixLocation,false,this.mvpMatrix);gl.drawArrays(gl.TRIANGLE_STRIP,this.drawingIndex,4);gl.bindTexture(gl.TEXTURE_2D,null)}}let playerBody,rayCaster;let debugDrawer;const keyboard=new Keyboard;let sprite;const spriteNames=["mario_idle.png","mario_run_0.png","mario_run_1.png","mario_run_2.png","mario_jump.png","simple_level.png"];let playerAnimationIndex=0;const playerRunAnimations=["mario_run_0.png","mario_run_1.png","mario_run_2.png"];const playerStates={idle:0,run:1,jump:2};let currentPlayerState=playerStates.jump;const projMatrix=mat4.create();mat4.ortho(projMatrix,-64,64,-64,64,50,-50);const viewMatrix=mat4.create();mat4.lookAt(viewMatrix,[0,0,50],[0,0,0],[0,1,0]);const projViewMatrix=mat4.create();mat4.mul(projViewMatrix,projMatrix,viewMatrix);const world=b2World.Create({x:0,y:-9.8});const pixelsPerMeter=30;let currentTime,lastTime,dt;const showCollidersCheckbox=document.getElementById("colliderCheckBox");let showColliders=showCollidersCheckbox.checked;showCollidersCheckbox.onchange=()=>{showColliders=showCollidersCheckbox.checked};const showRaysCheckbox=document.getElementById("rayCheckBox");let showRays=showRaysCheckbox.checked;showRaysCheckbox.onchange=()=>{showRays=showRaysCheckbox.checked};let currentAnimTime=0;const animInterval=.1;const directions={left:-1,right:1};let currentDir=directions.left;const input={p1:null,p2:null,maxFraction:1};const output={normal:new b2Vec2(0,0),fraction:1};let found=false;let groundedLeft=false;let groundedRight=false;const fixtures=[];function keyboardHandler(){if((keyboard.pressed("KeyW")||keyboard.pressed("ArrowUp"))&&(groundedLeft||groundedRight)){const vel=playerBody.GetLinearVelocity();vel.y=5;playerBody.SetLinearVelocity(vel)}if(keyboard.pressed("KeyA")||keyboard.pressed("ArrowLeft")){const vel=playerBody.GetLinearVelocity();vel.x=-2;playerBody.SetLinearVelocity(vel);currentDir=directions.left}if(keyboard.pressed("KeyD")||keyboard.pressed("ArrowRight")){const vel=playerBody.GetLinearVelocity();vel.x=2;playerBody.SetLinearVelocity(vel);currentDir=directions.right}}function animationLoop(){currentTime=Date.now();dt=(currentTime-lastTime)/1e3;lastTime=currentTime;keyboardHandler();world.Step(dt,{velocityIterations:3,positionIterations:2});draw(dt);requestAnimationFrame(animationLoop)}function updateRays(){if(showRays){rayCaster.drawLine([sprite.x,sprite.y+3],[sprite.x,sprite.y+10],[1,1,1])}let point1=new b2Vec2(sprite.x/pixelsPerMeter,(sprite.y+3)/pixelsPerMeter);let point2=new b2Vec2(sprite.x/pixelsPerMeter,(sprite.y+10)/pixelsPerMeter);input.p1=point1;input.p2=point2;found=false;for(let i=0;i<fixtures.length;i++){found=fixtures[i].RayCast(output,input);if(found){const name=fixtures[i].GetUserData().name;console.log(`name = ${name}`);break}}if(showRays){rayCaster.drawLine([sprite.x-5,sprite.y-3],[sprite.x-5,sprite.y-10],[1,1,1])}point1=new b2Vec2((sprite.x-5)/pixelsPerMeter,(sprite.y-3)/pixelsPerMeter);point2=new b2Vec2((sprite.x-5)/pixelsPerMeter,(sprite.y-10)/pixelsPerMeter);input.p1=point1;input.p2=point2;groundedLeft=false;for(let i=0;i<fixtures.length;i++){groundedLeft=fixtures[i].RayCast(output,input);if(groundedLeft)break}if(showRays){rayCaster.drawLine([sprite.x+5,sprite.y-3],[sprite.x+5,sprite.y-10],[1,1,1])}point1=new b2Vec2((sprite.x+5)/pixelsPerMeter,(sprite.y-3)/pixelsPerMeter);point2=new b2Vec2((sprite.x+5)/pixelsPerMeter,(sprite.y-10)/pixelsPerMeter);input.p1=point1;input.p2=point2;groundedRight=false;for(let i=0;i<fixtures.length;i++){groundedRight=fixtures[i].RayCast(output,input);if(groundedRight)break}}function draw(dt){gl.clear(gl.COLOR_BUFFER_BIT);sprite.setTextureRect("simple_level.png");sprite.setPosition(0,0);sprite.draw(projViewMatrix);switch(currentPlayerState){case playerStates.idle:sprite.setTextureRect("mario_idle.png");break;case playerStates.jump:sprite.setTextureRect("mario_jump.png");break;case playerStates.run:currentAnimTime+=dt;if(currentAnimTime>=animInterval){currentAnimTime=0;playerAnimationIndex++;if(playerAnimationIndex>=playerRunAnimations.length){playerAnimationIndex=0}}sprite.setTextureRect(playerRunAnimations[playerAnimationIndex]);break}sprite.w=currentDir*sprite.w;sprite.setPosition(playerBody.GetPosition().x*pixelsPerMeter,playerBody.GetPosition().y*pixelsPerMeter);sprite.draw(projViewMatrix);updateRays();if(groundedLeft||groundedRight){const vel=playerBody.GetLinearVelocity();if(Math.abs(vel.x)<1){currentPlayerState=playerStates.idle}else{currentPlayerState=playerStates.run}}else{currentPlayerState=playerStates.jump}if(showColliders){DrawShapes(debugDrawer,world)}}async function init(){if(!initWebGLContext("renderCanvas"))return;gl.clearColor(.2,.2,.2,1);gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);const textureProgram=await createProgram("assets/shaders/","texture.vert","texture.frag");if(!textureProgram)return;const aPositionLocation=gl.getAttribLocation(textureProgram,"aPosition");const aTexCoordLocation=gl.getAttribLocation(textureProgram,"aTexCoord");const uMvpMatrixLocation=gl.getUniformLocation(textureProgram,"uMvpMatrix");const texturePath="assets/sprites/texture.png";const texture=await loadTexture(texturePath);const textureResponse=await fetch("assets/sprites/texture.json");const textureContent=await textureResponse.text();const atlasJson=JSON.parse(textureContent);const spriteInfo=getSpriteInfo(atlasJson,spriteNames);sprite=new Sprite(textureProgram,spriteNames,spriteInfo,aPositionLocation,aTexCoordLocation,uMvpMatrixLocation,texture);const groundPosition=vec3.create();const groundScale=vec3.create();const pipePosition=vec3.create();const pipeScale=vec3.create();const bricksPosition=vec3.create();const bricksScale=vec3.create();const sidePositions=[];const sideScales=[];const levelResponse=await fetch("assets/levels/simple-level.json");const levelContent=JSON.parse(await levelResponse.text());const layers=levelContent.layers;const fieldSize=levelContent.width*levelContent.tilewidth;const x0=fieldSize/2;const y0=fieldSize/2;for(let i=0;i<layers.length;i++){if(layers[i].name==="Colliders"){const objects=layers[i].objects;for(let i=0;i<objects.length;i++){const x=objects[i].x;const y=objects[i].y;const w=objects[i].width;const h=objects[i].height;if(objects[i].name==="ground"){groundPosition[0]=x-x0+w/2;groundPosition[1]=y0-y-h/2;groundScale[0]=w;groundScale[1]=h;groundScale[2]=1}else if(objects[i].name==="pipe"){pipePosition[0]=x-x0+w/2;pipePosition[1]=y0-y-h/2;pipeScale[0]=w;pipeScale[1]=h;pipeScale[2]=1}else if(objects[i].name==="bricks"){bricksPosition[0]=x-x0+w/2;bricksPosition[1]=y0-y-h/2;bricksScale[0]=w;bricksScale[1]=h;bricksScale[2]=1}else if(objects[i].name==="side0"){const pos=vec3.create();pos[0]=x-x0+w/2;pos[1]=y0-y-h/2;sidePositions.push(pos);const scale=vec3.create();scale[0]=w;scale[1]=h;scale[2]=1;sideScales.push(scale)}else if(objects[i].name==="side1"){const pos=vec3.create();pos[0]=x-x0+w/2;pos[1]=y0-y-h/2;sidePositions.push(pos);const scale=vec3.create();scale[0]=w;scale[1]=h;scale[2]=1;sideScales.push(scale)}else if(objects[i].name==="side2"){const pos=vec3.create();pos[0]=x-x0+w/2;pos[1]=y0-y-h/2;sidePositions.push(pos);const scale=vec3.create();scale[0]=w;scale[1]=h;scale[2]=1;sideScales.push(scale)}}}}const lightlessProgram=await createProgram("assets/shaders/","lightless.vert","lightless.frag");if(!lightlessProgram)return;debugDrawer=new DebugDrawer(lightlessProgram,pixelsPerMeter);debugDrawer.projViewMatrix=projViewMatrix;rayCaster=new RayCaster(lightlessProgram);rayCaster.projViewMatrix=projViewMatrix;const playerPosition=vec3.fromValues(0,0,0);vec3.fromValues(20,20,1);const playerRad=0;const playerShape=new b2CircleShape(8/pixelsPerMeter);playerBody=world.CreateBody({type:b2BodyType.b2_dynamicBody,position:{x:playerPosition[0]/pixelsPerMeter,y:playerPosition[1]/pixelsPerMeter},angle:playerRad});playerBody.SetFixedRotation(true);const playerFixture=playerBody.CreateFixture({shape:playerShape,density:1});playerFixture.SetFriction(3);fixtures.push(playerFixture);const groundBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:groundPosition[0]/pixelsPerMeter,y:groundPosition[1]/pixelsPerMeter}});const groundShape=new b2PolygonShape;groundShape.SetAsBox(groundScale[0]/2/pixelsPerMeter,groundScale[1]/2/pixelsPerMeter);const groundFixture=groundBody.CreateFixture({shape:groundShape});groundFixture.SetFriction(3);fixtures.push(groundFixture);const pipeBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:pipePosition[0]/pixelsPerMeter,y:pipePosition[1]/pixelsPerMeter}});const pipeShape=new b2PolygonShape;pipeShape.SetAsBox(pipeScale[0]/2/pixelsPerMeter,pipeScale[1]/2/pixelsPerMeter);const pipeFixture=pipeBody.CreateFixture({shape:pipeShape});pipeFixture.SetFriction(3);fixtures.push(pipeFixture);const bricksBody=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:bricksPosition[0]/pixelsPerMeter,y:bricksPosition[1]/pixelsPerMeter}});const bricksShape=new b2PolygonShape;bricksShape.SetAsBox(bricksScale[0]/2/pixelsPerMeter,bricksScale[1]/2/pixelsPerMeter);const bricksFixture=bricksBody.CreateFixture({shape:bricksShape});bricksFixture.SetFriction(3);bricksFixture.SetUserData({name:"bricks"});fixtures.push(bricksFixture);for(let i=0;i<sidePositions.length;i++){const body=world.CreateBody({type:b2BodyType.b2_staticBody,position:{x:sidePositions[i][0]/pixelsPerMeter,y:sidePositions[i][1]/pixelsPerMeter}});const shape=new b2PolygonShape;shape.SetAsBox(sideScales[i][0]/2/pixelsPerMeter,sideScales[i][1]/2/pixelsPerMeter);const fixture=body.CreateFixture({shape:shape});fixture.SetFriction(0)}lastTime=Date.now();animationLoop()}init();