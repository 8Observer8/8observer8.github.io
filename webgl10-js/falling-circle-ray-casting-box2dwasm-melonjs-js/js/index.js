import*as me from"melonjs";import Box2DLib from"box2d-wasm";let box2d=null;function initBox2D(localhost=true){return new Promise(resolve=>{Box2DLib().then(re=>{box2d=re;resolve()})})}const sizeOfB2Vec2=Float32Array.BYTES_PER_ELEMENT*2;class DebugDrawer{constructor(renderer,pixelsPerMeter){this.renderer=renderer;this.pixelsPerMeter=pixelsPerMeter;const{b2Color,b2Draw:{e_shapeBit},b2Vec2,JSDraw,wrapPointer}=box2d;const reifyArray=(array_p,numElements,sizeOfElement,ctor)=>Array(numElements).fill(undefined).map((_,index)=>wrapPointer(array_p+index*sizeOfElement,ctor));self=this;const debugDrawer=Object.assign(new JSDraw,{DrawSegment(vert1_p,vert2_p,color_p){},DrawPolygon(vertices_p,vertexCount,color_p){},DrawSolidPolygon(vertices_p,vertexCount,color_p){const color=wrapPointer(color_p,b2Color);const vertices=reifyArray(vertices_p,vertexCount,sizeOfB2Vec2,b2Vec2);self.drawLines(vertices,color)},DrawCircle(center_p,radius,color_p){},DrawSolidCircle(center_p,radius,axis_p,color_p){const center=wrapPointer(center_p,b2Vec2);const color=wrapPointer(color_p,b2Color);self.drawCircle(center.x*self.pixelsPerMeter,center.y*self.pixelsPerMeter,radius*self.pixelsPerMeter,color)},DrawTransform(transform_p){},DrawPoint(vertex_p,sizeMetres,color_p){}});debugDrawer.SetFlags(e_shapeBit);this.instance=debugDrawer}drawLines(vertices,color){this.renderer.setLineWidth(3);this.renderer.beginPath();const c=(new me.Color).setFloat(color.r,color.g,color.b,1);this.renderer.setColor(c);this.renderer.moveTo(vertices[0].x*this.pixelsPerMeter,vertices[0].y*this.pixelsPerMeter);this.renderer.lineTo(vertices[1].x*this.pixelsPerMeter,vertices[1].y*this.pixelsPerMeter);this.renderer.lineTo(vertices[2].x*this.pixelsPerMeter,vertices[2].y*this.pixelsPerMeter);this.renderer.lineTo(vertices[3].x*this.pixelsPerMeter,vertices[3].y*this.pixelsPerMeter);this.renderer.lineTo(vertices[0].x*this.pixelsPerMeter,vertices[0].y*this.pixelsPerMeter);this.renderer.stroke()}drawCircle(x0,y0,radius,color){let angle=0;const angleStep=20;const n=360/angleStep;this.renderer.setLineWidth(3);this.renderer.beginPath();const c=(new me.Color).setFloat(color.r,color.g,color.b,1);this.renderer.setColor(c);let x=radius*Math.cos(angle*Math.PI/180);let y=radius*Math.sin(angle*Math.PI/180);this.renderer.moveTo(x0+x,y0+y);angle+=angleStep;for(let i=0;i<n;i++){x=radius*Math.cos(angle*Math.PI/180);y=radius*Math.sin(angle*Math.PI/180);this.renderer.lineTo(x0+x,y0+y);angle+=angleStep}this.renderer.stroke()}}class RayCastCallback{constructor(renderer,pixelsPerMeter,metaData){this.renderer=renderer;this.pixelsPerMeter=pixelsPerMeter;this.metaData=metaData;const{b2Fixture,getPointer,JSRayCastCallback,wrapPointer}=box2d;const self=this;this.instance=Object.assign(new JSRayCastCallback,{ReportFixture(fixture_p,point_p,normal_p,fraction){const fixture=wrapPointer(fixture_p,b2Fixture);const name=self.metaData[getPointer(fixture)].name;console.log(name)}})}drawRay(from,to,color,thickness=1){this.renderer.setLineWidth(thickness);this.renderer.beginPath();const c=(new me.Color).setFloat(color[0],color[1],color[2],1);this.renderer.setColor(c);this.renderer.moveTo(from.x*this.pixelsPerMeter,from.y*this.pixelsPerMeter);this.renderer.lineTo(to.x*this.pixelsPerMeter,to.y*this.pixelsPerMeter);this.renderer.stroke()}}me.device.onReady(()=>{if(!me.video.init(300,300,{parent:"screen",renderer:me.video.CANVAS,scale:"fit",antiAlias:true})){alert("Your browser does not support HTML5 canvas.");return}async function init(){await initBox2D();class Graphics extends me.Renderable{constructor(){super(0,0,me.game.viewport.width,me.game.viewport.height);this.anchorPoint.set(0,0);const{b2_dynamicBody,b2BodyDef,b2CircleShape,b2PolygonShape,b2Vec2,b2World,getPointer}=box2d;this.world=new b2World;const gravity=new b2Vec2(0,9.8);this.world.SetGravity(gravity);this.pixelsPerMeter=30;this.debugDrawer=new DebugDrawer(me.game.renderer,this.pixelsPerMeter);this.world.SetDebugDraw(this.debugDrawer.instance);const metaData={};this.rayCastCallback=new RayCastCallback(me.game.renderer,this.pixelsPerMeter,metaData);const groundBodyDef=new b2BodyDef;groundBodyDef.set_position(new b2Vec2(150/this.pixelsPerMeter,285/this.pixelsPerMeter));const groundBody=this.world.CreateBody(groundBodyDef);const groundShape=new b2PolygonShape;groundShape.SetAsBox(270/2/this.pixelsPerMeter,15/2/this.pixelsPerMeter);const groundFixture=groundBody.CreateFixture(groundShape,0);metaData[getPointer(groundFixture)]={name:"ground"};const circleBodyDef=new b2BodyDef;circleBodyDef.type=b2_dynamicBody;circleBodyDef.position=new b2Vec2(140/this.pixelsPerMeter,0/this.pixelsPerMeter);this.circleBody=this.world.CreateBody(circleBodyDef);const circleShape=new b2CircleShape;circleShape.m_radius=20/this.pixelsPerMeter;const circleFixture=this.circleBody.CreateFixture(circleShape,1);circleFixture.SetRestitution(.5);metaData[getPointer(circleFixture)]={name:"circle"};const firstPlatformBodyDef=new b2BodyDef;firstPlatformBodyDef.set_position(new b2Vec2(225/this.pixelsPerMeter,150/this.pixelsPerMeter));firstPlatformBodyDef.angle=0*Math.PI/180;const firstPlatformBody=this.world.CreateBody(firstPlatformBodyDef);const firstPlatformShape=new b2PolygonShape;firstPlatformShape.SetAsBox(120/2/this.pixelsPerMeter,15/2/this.pixelsPerMeter);const firstPlatformFixture=firstPlatformBody.CreateFixture(firstPlatformShape,0);metaData[getPointer(firstPlatformFixture)]={name:"first platform"};const secondPlatformBodyDef=new b2BodyDef;secondPlatformBodyDef.set_position(new b2Vec2(225/this.pixelsPerMeter,200/this.pixelsPerMeter));secondPlatformBodyDef.angle=0*Math.PI/180;const secondPlatformBody=this.world.CreateBody(secondPlatformBodyDef);const secondPlatformShape=new b2PolygonShape;secondPlatformShape.SetAsBox(120/2/this.pixelsPerMeter,15/2/this.pixelsPerMeter);const secondPlatformFixture=secondPlatformBody.CreateFixture(secondPlatformShape,0);metaData[getPointer(secondPlatformFixture)]={name:"second platform"}}update(dt){this.world.Step(dt/1e3,3,2);return true}draw(renderer){const{b2Vec2}=box2d;renderer.clearColor("#000000");renderer.setGlobalAlpha(1);this.world.DebugDraw();const circlePosition=this.circleBody.GetPosition();const circleRayEnd=new b2Vec2(circlePosition.x+30/this.pixelsPerMeter,circlePosition.y);this.world.RayCast(this.rayCastCallback.instance,circlePosition,circleRayEnd);this.rayCastCallback.drawRay(circlePosition,circleRayEnd,[1,0,0],3)}}me.game.world.addChild(new Graphics)}init()});