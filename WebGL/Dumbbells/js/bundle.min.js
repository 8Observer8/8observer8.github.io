window.onload=main;function main(){var canvas=document.getElementById("renderCanvas");var scene=new Scene(canvas)}function ObjLoader(){var Ajax=function(){var _this=this;this.xmlhttp=new XMLHttpRequest;this.get=function(url,callback){_this.xmlhttp.onreadystatechange=function(){if(_this.xmlhttp.readyState===4){callback(_this.xmlhttp.responseText,_this.xmlhttp.status)}};_this.xmlhttp.open("GET",url,true);_this.xmlhttp.send()}};this.loadMeshes=function(nameAndURLs,completionCallback){var semaphore=Object.keys(nameAndURLs).length;var error=false;var meshes={};for(var mesh_name in nameAndURLs){if(nameAndURLs.hasOwnProperty(mesh_name)){(new Ajax).get(nameAndURLs[mesh_name],function(name){return function(data,status){if(status===200){meshes[name]=new mesh(data)}else{error=true;console.error('An error has occurred and the mesh "'+name+'" could not be downloaded.')}semaphore--;if(semaphore===0){if(error){console.error("An error has occurred and one or meshes has not been "+"downloaded. The execution of the script has terminated.");throw""}completionCallback(meshes)}}}(mesh_name))}}};var mesh=function(objectData){var verts=[],vertNormals=[],textures=[],unpacked={};unpacked.verts=[];unpacked.norms=[];unpacked.textures=[];unpacked.hashindices={};unpacked.indices=[];unpacked.index=0;var lines=objectData.split("\n");var VERTEX_RE=/^v\s/;var NORMAL_RE=/^vn\s/;var TEXTURE_RE=/^vt\s/;var FACE_RE=/^f\s/;var WHITESPACE_RE=/\s+/;for(var i=0;i<lines.length;i++){var line=lines[i].trim();var elements=line.split(WHITESPACE_RE);elements.shift();if(VERTEX_RE.test(line)){verts.push.apply(verts,elements)}else if(NORMAL_RE.test(line)){vertNormals.push.apply(vertNormals,elements)}else if(TEXTURE_RE.test(line)){textures.push.apply(textures,elements)}else if(FACE_RE.test(line)){var quad=false;for(var j=0,eleLen=elements.length;j<eleLen;j++){if(j===3&&!quad){j=2;quad=true}if(elements[j]in unpacked.hashindices){unpacked.indices.push(unpacked.hashindices[elements[j]])}else{var vertex=elements[j].split("/");unpacked.verts.push(verts[(vertex[0]-1)*3+0]);unpacked.verts.push(verts[(vertex[0]-1)*3+1]);unpacked.verts.push(verts[(vertex[0]-1)*3+2]);unpacked.textures.push(textures[(vertex[1]-1)*2+0]);unpacked.textures.push(textures[(vertex[1]-1)*2+1]);unpacked.norms.push(vertNormals[(vertex[2]-1)*3+0]);unpacked.norms.push(vertNormals[(vertex[2]-1)*3+1]);unpacked.norms.push(vertNormals[(vertex[2]-1)*3+2]);unpacked.hashindices[elements[j]]=unpacked.index;unpacked.indices.push(unpacked.index);unpacked.index+=1}if(j===3&&quad){unpacked.indices.push(unpacked.hashindices[elements[0]])}}}}this.vertices=unpacked.verts;this.vertexNormals=unpacked.norms;this.textures=unpacked.textures;this.indices=unpacked.indices}}function Scene(canvas){var vertexShaderSource="attribute vec4 a_position;"+"attribute vec2 a_texCoord;"+"attribute vec3 a_normal;"+"uniform mat4 u_projMatrix;"+"uniform mat4 u_modelMatrix;"+"uniform mat4 u_viewMatrix;"+"varying vec4 v_position;"+"varying vec3 v_normal;"+"varying vec2 v_texCoord;"+"void main()"+"{"+"    mat4 modelViewMatrix = u_viewMatrix * u_modelMatrix;"+"    v_position = modelViewMatrix * a_position;"+"    gl_Position = u_projMatrix * v_position;"+"    v_normal = normalize(mat3(modelViewMatrix) * a_normal);"+"    v_texCoord = a_texCoord;"+"}";var fragmentShaderSource="precision mediump float;"+"uniform mat4 u_fViewMatrix;"+"uniform vec3 u_lightPosition;"+"uniform sampler2D u_sampler;"+"varying vec4 v_position;"+"varying vec3 v_normal;"+"varying vec2 v_texCoord;"+"void main()"+"{"+"   vec3 normal = normalize(v_normal);"+"   vec3 lightPosition = vec3(u_fViewMatrix * vec4(u_lightPosition, 1) - v_position);"+"   vec3 lightDir = normalize(lightPosition);"+"   float lightDist = length(lightPosition);"+"   float specular = 0.0;"+"   float d = max(dot(v_normal, lightDir), 0.0);"+"   if (d > 0.0)"+"   {"+"       vec3 viewVec = vec3(0,0,1.0);"+"       vec3 reflectVec = reflect(-lightDir, normal);"+"       specular = pow(max(dot(reflectVec, viewVec), 0.0), 120.0);"+"   }"+"   vec3 ambient = vec3(0.2,0.2,0.2);"+"   vec3 diffuse = texture2D(u_sampler, v_texCoord).rgb;"+"   gl_FragColor.rgb = ambient + diffuse * d + specular;"+"   gl_FragColor.a = 1.0;"+"}";var rotator;var numVertices;var gl=canvas.getContext("webgl");var program=createShaderProgram(vertexShaderSource,fragmentShaderSource);var u_projMatrix=gl.getUniformLocation(program,"u_projMatrix");var u_modelMatrix=gl.getUniformLocation(program,"u_modelMatrix");var u_viewMatrix=gl.getUniformLocation(program,"u_viewMatrix");var u_fViewMatrix=gl.getUniformLocation(program,"u_fViewMatrix");var u_lightPosition=gl.getUniformLocation(program,"u_lightPosition");if(u_projMatrix===null||u_modelMatrix===null||u_viewMatrix===null||u_fViewMatrix===null||u_lightPosition===null){console.log("Failed to get an uniform variable");return}var modelMatrix=mat4.create();var viewMatrix=mat4.create();var projMatrix=mat4.create();var lightPosition=new Float32Array([10,2,10]);mat4.perspective(projMatrix,45*Math.PI/180,1,.1,1e3);gl.enable(gl.DEPTH_TEST);gl.clearColor(.3,.2,.3,1);var objLoader=new ObjLoader;objLoader.loadMeshes({dumbbells:"models/Dumbbells.obj"},objectsLoaded);function objectsLoaded(meshes){initArrayBuffer(program,new Float32Array(meshes.dumbbells.vertices),3,"a_position");initArrayBuffer(program,new Float32Array(meshes.dumbbells.textures),2,"a_texCoord");initArrayBuffer(program,new Float32Array(meshes.dumbbells.vertexNormals),3,"a_normal");gl.bindBuffer(gl.ARRAY_BUFFER,null);var indexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(meshes.dumbbells.indices),gl.STATIC_DRAW);numVertices=meshes.dumbbells.indices.length;initTextures(program)}function activateRotator(){rotator=new SimpleRotator(canvas,draw,8);draw()}function draw(){viewMatrix=rotator.getViewMatrix();gl.uniformMatrix4fv(u_modelMatrix,false,modelMatrix);gl.uniformMatrix4fv(u_viewMatrix,false,viewMatrix);gl.uniformMatrix4fv(u_fViewMatrix,false,viewMatrix);gl.uniformMatrix4fv(u_projMatrix,false,projMatrix);gl.uniform3fv(u_lightPosition,lightPosition);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);gl.drawElements(gl.TRIANGLES,numVertices,gl.UNSIGNED_SHORT,0)}function initTextures(program){var texture=gl.createTexture();var u_sampler=gl.getUniformLocation(program,"u_sampler");var image=new Image;image.onload=function(){loadTexture(texture,image,u_sampler)};image.src="models/Dumbbells.png"}function loadTexture(texture,image,u_sampler){gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,1);gl.activeTexture(gl.TEXTURE0);gl.bindTexture(gl.TEXTURE_2D,texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,image);gl.uniform1i(u_sampler,0);activateRotator()}function initArrayBuffer(program,data,num,attribute){var buffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buffer);gl.bufferData(gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);var a_attribute=gl.getAttribLocation(program,attribute);gl.vertexAttribPointer(a_attribute,num,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(a_attribute)}function createShaderProgram(vShaderSource,fShaderSource){var vShader=createShader(vShaderSource,gl.VERTEX_SHADER);var fShader=createShader(fShaderSource,gl.FRAGMENT_SHADER);var program=gl.createProgram();gl.attachShader(program,vShader);gl.attachShader(program,fShader);gl.linkProgram(program);gl.useProgram(program);return program}function createShader(shaderSource,type){var shader=gl.createShader(type);gl.shaderSource(shader,shaderSource);gl.compileShader(shader);var error=gl.getShaderInfoLog(shader);if(error.length>0){console.log(error)}return shader}}function SimpleRotator(canvas,callback,viewDistance,rotY,rotX){canvas.addEventListener("mousedown",doMouseDown,false);var rotateX=rotX===undefined?0:rotX;var rotateY=rotY===undefined?0:rotY;var xLimit=85;var degreesPerPixelX=90/canvas.height;var degreesPerPixelY=180/canvas.width;this.getViewMatrix=function(){var cosX=Math.cos(rotateX/180*Math.PI);var sinX=Math.sin(rotateX/180*Math.PI);var cosY=Math.cos(rotateY/180*Math.PI);var sinY=Math.sin(rotateY/180*Math.PI);var mat=[cosY,sinX*sinY,-cosX*sinY,0,0,cosX,sinX,0,sinY,-sinX*cosY,cosX*cosY,0,0,0,0,1];if(viewDistance!==undefined){mat[14]-=viewDistance}return mat};var prevX,prevY;var dragging=false;function doMouseDown(evt){if(dragging){return}dragging=true;document.addEventListener("mousemove",doMouseDrag,false);document.addEventListener("mouseup",doMouseUp,false);var r=canvas.getBoundingClientRect();prevX=evt.clientX-r.left;prevY=evt.clientY-r.top}function doMouseDrag(evt){if(!dragging){return}var r=canvas.getBoundingClientRect();var x=evt.clientX-r.left;var y=evt.clientY-r.top;var newRotX=rotateX+degreesPerPixelX*(y-prevY);var newRotY=rotateY+degreesPerPixelY*(x-prevX);newRotX=Math.max(-xLimit,Math.min(xLimit,newRotX));prevX=x;prevY=y;if(newRotX!=rotateX||newRotY!=rotateY){rotateX=newRotX;rotateY=newRotY;if(callback){callback()}}}function doMouseUp(evt){if(!dragging){return}dragging=false;document.removeEventListener("mousemove",doMouseDrag,false);document.removeEventListener("mouseup",doMouseUp,false)}}