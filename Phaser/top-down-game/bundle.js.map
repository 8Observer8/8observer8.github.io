{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/Boot.ts","src/Game.ts","src/PlayGame.ts","src/Preload.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","TopDownGame","Boot","_super","this","__extends","prototype","preload","game","load","image","create","stage","backgroundColor","scale","scaleMode","Phaser","ScaleManager","SHOW_ALL","pageAlignHorizontally","pageAlignVertically","refresh","physics","startSystem","Physics","ARCADE","state","start","State","Preload","PlayGame","Game","width","height","_this","AUTO","add","window","onload","console","log","map","tilemap","addTilesetImage","background","createLayer","walls","setCollisionBetween","resizeWorld","createItems","createDoors","createPlayer","cursors","input","keyboard","createCursorKeys","items","group","enableBody","findObjectsByType","forEach","element","createFromTiledObject","doors","result","player","sprite","x","y","anchor","setTo","arcade","enable","body","collideWorldBounds","camera","follow","type","layer","objects","properties","tileHeight","push","Object","keys","key","update","velocity","collide","collect","up","isDown","down","left","right","item","destroy","preloadBar","world","centerX","centerY","setPreloadSprite","Tilemap","TILED_JSON"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nexport namespace TopDownGame\r\n{\r\n    export class Boot extends Phaser.State\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        preload()\r\n        {\r\n            this.game.load.image('preloadBar', './assets/images/preloader-bar.png');\r\n        }\r\n\r\n        create()\r\n        {\r\n            this.game.stage.backgroundColor = \"#fff\";\r\n\r\n            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n            this.game.scale.pageAlignHorizontally = true;\r\n            this.game.scale.pageAlignVertically = true;\r\n            this.game.scale.refresh();\r\n            this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n\r\n            this.game.state.start('Preload', true, false);\r\n\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nimport * as BootModule from \"./Boot\";\r\nimport Boot = BootModule.TopDownGame.Boot;\r\n\r\nimport * as PreloadModule from \"./Preload\";\r\nimport Preload = PreloadModule.TopDownGame.Preload;\r\n\r\nimport * as PlayGameModule from \"./PlayGame\";\r\nimport PlayGame = PlayGameModule.TopDownGame.PlayGame;\r\n\r\nexport namespace TopDownGame\r\n{\r\n    export class Game extends Phaser.Game\r\n    {\r\n        constructor(width: number, height: number)\r\n        {\r\n            super(width, height, Phaser.AUTO, '');\r\n\r\n            this.state.add('Boot', Boot, false);\r\n            this.state.add('Preload', Preload, false);\r\n            this.state.add('PlayGame', PlayGame, false);\r\n\r\n            this.state.start('Boot', true, true);\r\n        }\r\n    }\r\n}\r\n\r\nwindow.onload = () =>\r\n{\r\n    new TopDownGame.Game(160, 160);\r\n    console.log('The game is on');\r\n};\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nexport namespace TopDownGame\r\n{\r\n    export class PlayGame extends Phaser.State\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        map: Phaser.Tilemap;\r\n        background: Phaser.TilemapLayer;\r\n        walls: Phaser.TilemapLayer;\r\n        items: Phaser.Group;\r\n        doors: Phaser.Group;\r\n        player: Phaser.Sprite;\r\n        cursors: Phaser.CursorKeys;\r\n\r\n        create()\r\n        {\r\n            this.map = this.game.add.tilemap('level1');\r\n            this.map.addTilesetImage('tiles', 'gameTiles');\r\n\r\n            this.background = this.map.createLayer('backgroundLayer');\r\n            this.walls = this.map.createLayer('blockedLayer');\r\n            this.map.setCollisionBetween(1, 2000, true, 'blockedLayer');\r\n\r\n            this.background.resizeWorld();\r\n            this.createItems();\r\n            this.createDoors();\r\n            this.createPlayer();\r\n\r\n            this.cursors = this.game.input.keyboard.createCursorKeys();\r\n        }\r\n\r\n        createItems()\r\n        {\r\n            this.items = this.game.add.group();\r\n            this.items.enableBody = true;\r\n            let result = this.findObjectsByType('item', this.map, 'objectsLayer');\r\n            result.forEach((element: any) =>\r\n            {\r\n                this.createFromTiledObject(element, this.items);\r\n            });\r\n        }\r\n\r\n        createDoors()\r\n        {\r\n            this.doors = this.game.add.group();\r\n            this.items.enableBody = true;\r\n            var result = this.findObjectsByType('door', this.map, 'objectsLayer');\r\n            result.forEach((element: any) =>\r\n            {\r\n                this.createFromTiledObject(element, this.doors);\r\n            })\r\n        }\r\n\r\n        createPlayer()\r\n        {\r\n            var result = this.findObjectsByType('playerStart', this.map, 'objectsLayer');\r\n\r\n            this.player = this.game.add.sprite(result[0].x, result[0].y, 'player');\r\n            this.player.anchor.setTo(0.5);\r\n            this.game.physics.arcade.enable(this.player);\r\n            this.player.body.collideWorldBounds = true;\r\n\r\n            this.game.camera.follow(this.player);\r\n        }\r\n\r\n\r\n        findObjectsByType(type: string, map: Phaser.Tilemap, layer: any)\r\n        {\r\n            let result: any = [];\r\n            map.objects[layer].forEach((element: any) =>\r\n            {\r\n                if (element.properties.type === type)\r\n                {\r\n                    element.y -= this.map.tileHeight;\r\n                    result.push(element);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n\r\n        createFromTiledObject(element: any, group: Phaser.Group)\r\n        {\r\n            var sprite = group.create(element.x, element.y, element.properties.sprite);\r\n\r\n            Object.keys(element.properties).forEach(key =>\r\n            {\r\n                sprite[key] = element.properties[key];\r\n            });\r\n        }\r\n\r\n        update()\r\n        {\r\n            this.player.body.velocity.x = 0;\r\n            this.player.body.velocity.y = 0;\r\n\r\n            this.game.physics.arcade.collide(this.player, this.walls);\r\n            this.game.physics.arcade.collide(this.player, this.items, this.collect, null, this);\r\n\r\n            if (this.cursors.up.isDown)\r\n            {\r\n                this.player.body.velocity.y -= 50;\r\n            }\r\n            else if (this.cursors.down.isDown)\r\n            {\r\n                this.player.body.velocity.y += 50;\r\n            }\r\n            if (this.cursors.left.isDown)\r\n            {\r\n                this.player.body.velocity.x -= 50;\r\n            }\r\n            else if (this.cursors.right.isDown)\r\n            {\r\n                this.player.body.velocity.x += 50;\r\n            }\r\n        }\r\n\r\n        collect(player: Phaser.Sprite, item: Phaser.Sprite)\r\n        {\r\n            item.destroy();\r\n            console.log(\"yummy\");\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nexport namespace TopDownGame\r\n{\r\n    export class Preload extends Phaser.State\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        preloadBar: Phaser.Sprite;\r\n\r\n        preload()\r\n        {\r\n            this.preloadBar = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY + 128, 'preloadBar');\r\n            this.preloadBar.anchor.setTo(0.5);\r\n            this.load.setPreloadSprite(this.preloadBar);\r\n            this.load.tilemap('level1', './assets/tilemaps/level1.json', null, Phaser.Tilemap.TILED_JSON);\r\n            this.load.tilemap('level2', './assets/tilemaps/level2.json', null, Phaser.Tilemap.TILED_JSON);\r\n            this.load.image('gameTiles', './assets/images/tiles.png');\r\n            this.load.image('greencup', './assets/images/greencup.png');\r\n            this.load.image('bluecup', './assets/images/bluecup.png');\r\n            this.load.image('player', './assets/images/player.png');\r\n            this.load.image('browndoor', './assets/images/browndoor.png');\r\n        }\r\n\r\n        create()\r\n        {\r\n            this.game.state.start('PlayGame');\r\n        }\r\n    }\r\n}\r\n"]}