{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/Boot.ts","src/Game.ts","src/MainMenu.ts","src/PlayGame.ts","src/Preload.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","GameModule","SpaceHipster","Boot","_super","this","__extends","prototype","init","highScore","preload","game","load","image","create","stage","backgroundColor","scale","scaleMode","Phaser","ScaleManager","SHOW_ALL","minWidth","minHeight","maxWidth","maxHeight","pageAlignHorizontally","pageAlignVertically","refresh","physics","startSystem","Physics","ARCADE","state","start","State","MainMenu","PlayGame","Preload","Game","_this","window","innerWidth","innerHeight","AUTO","add","onload","input","enabled","background","tileSprite","width","height","autoScroll","text","style","font","fill","align","beginText","anchor","set","console","log","highScoreText","update","activePointer","justPressed","playerScore","playerSpeed","world","setBounds","explosionSound","audio","collectSound","player","sprite","centerX","centerY","setTo","animations","play","arcade","enable","body","collideWorldBounds","camera","follow","generateAsteroids","generateCollectibles","showLabels","moveToPointer","collide","asteroids","hitAsteroid","overlap","collectables","collect","group","enableBody","physicsBodyType","asteroid","numAsteroids","rnd","integerInRange","randomX","randomY","velocity","x","y","immovable","emitter","makeParticles","minParticleSpeed","maxParticleSpeed","gravity","Point","kill","Math","max","time","events","gameOver","collectable","numCollectibles","scoreLabel","fixedToCamera","splash","preloadBar","setPreloadSprite","spritesheet"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nimport * as GameModule from \"./Game\";\r\n\r\nexport namespace SpaceHipster\r\n{\r\n    export class Boot extends Phaser.State\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        init()\r\n        {\r\n            if (!GameModule.SpaceHipster.highScore)\r\n            {\r\n                GameModule.SpaceHipster.highScore = 0;\r\n            }\r\n        }\r\n\r\n        preload()\r\n        {\r\n            this.game.load.image('logo', './assets/images/logo.png');\r\n            this.game.load.image('preloadbar', './assets/images/preloader-bar.png');\r\n        }\r\n\r\n        create()\r\n        {\r\n            this.game.stage.backgroundColor = '#fff';\r\n            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\r\n            this.game.scale.minWidth = 240;\r\n            this.game.scale.minHeight = 170;\r\n            this.game.scale.maxWidth = 2880;\r\n            this.game.scale.maxHeight = 1920;\r\n\r\n            this.game.scale.pageAlignHorizontally = true;\r\n            this.game.scale.pageAlignVertically = true;\r\n\r\n            this.game.scale.refresh();\r\n\r\n            this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n\r\n            this.game.state.start('Preload');\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nimport * as BootModule from \"./Boot\";\r\nimport Boot = BootModule.SpaceHipster.Boot;\r\n\r\nimport * as MainMenuModule from \"./MainMenu\";\r\nimport MainMenu = MainMenuModule.SpaceHipster.MainMenu;\r\n\r\nimport * as PlayGameModule from \"./PlayGame\";\r\nimport PlayGame = PlayGameModule.SpaceHipster.PlayGame;\r\n\r\nimport * as PreloadModule from \"./Preload\";\r\nimport Preload = PreloadModule.SpaceHipster.Preload;\r\n\r\nexport namespace SpaceHipster\r\n{\r\n    export class Game extends Phaser.Game\r\n    {\r\n        public constructor()\r\n        {\r\n            super(window.innerWidth, window.innerHeight, Phaser.AUTO, '');\r\n            this.state.add('Boot', Boot, false);\r\n            this.state.add('MainMenu', MainMenu, false);\r\n            this.state.add('PlayGame', PlayGame, false);\r\n            this.state.add('Preload', Preload, false);\r\n            this.state.start('Boot');\r\n        }\r\n    }\r\n\r\n    export let highScore: number;\r\n}\r\n\r\nwindow.onload = () =>\r\n{\r\n    new SpaceHipster.Game();\r\n};\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nimport * as GameModule from \"./Game\";\r\n\r\nexport namespace SpaceHipster\r\n{\r\n    export class MainMenu extends Phaser.State\r\n    {\r\n        public constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        background: Phaser.TileSprite;\r\n        beginText: Phaser.Text;\r\n        highScoreText: Phaser.Text;\r\n\r\n        create()\r\n        {\r\n            this.game.input.enabled = true;\r\n            this.background = this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'space');\r\n            this.background.autoScroll(-20, 0);\r\n\r\n            let text = \"Tap to Begin\";\r\n            let style = {\r\n                font: \"30px Arial\",\r\n                fill: \"#fff\",\r\n                align: \"center\"\r\n            };\r\n\r\n            this.beginText = this.game.add.text(this.game.width / 2, this.game.height / 2, text, style);\r\n            this.beginText.anchor.set(0.5, 0.5);\r\n            console.log(this.beginText);\r\n\r\n            text = \"Highest Score: \" + GameModule.SpaceHipster.highScore;\r\n            this.highScoreText = this.game.add.text(this.game.width / 2, this.game.height / 2 + 50, text, style);\r\n            this.highScoreText.anchor.set(0.5, 0.5);\r\n        }\r\n\r\n        update()\r\n        {\r\n            if (this.game.input.activePointer.justPressed())\r\n            {\r\n                this.game.state.start('PlayGame');\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nimport * as GameModule from \"./Game\";\r\n\r\nexport namespace SpaceHipster\r\n{\r\n    export class PlayGame extends Phaser.State\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        playerScore: number;\r\n        playerSpeed: number;\r\n\r\n        background: Phaser.TileSprite;\r\n        player: Phaser.Sprite;\r\n\r\n        explosionSound: Phaser.Sound;\r\n        collectSound: Phaser.Sound;\r\n\r\n        asteroids: Phaser.Group;\r\n        collectables: Phaser.Group;\r\n\r\n        scoreLabel: Phaser.Text;\r\n\r\n        init()\r\n        {\r\n            this.playerScore = 0;\r\n            this.playerSpeed = 100;\r\n        }\r\n\r\n        create()\r\n        {\r\n            this.game.world.setBounds(0, 0, 1920, 1920);\r\n            this.background = this.game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'space');\r\n\r\n            this.explosionSound = this.game.add.audio('explosion');\r\n            this.collectSound = this.game.add.audio('collect');\r\n\r\n            this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'playership');\r\n            this.player.anchor.setTo(0.5);\r\n            this.player.scale.setTo(2);\r\n\r\n            this.player.animations.add('fly', [0, 1, 2, 3], 5, true);\r\n            this.player.animations.play('fly');\r\n\r\n            this.game.physics.arcade.enable(this.player);\r\n            this.player.body.collideWorldBounds = true;\r\n\r\n            this.game.camera.follow(this.player);\r\n\r\n            this.generateAsteroids();\r\n            this.generateCollectibles();\r\n            this.showLabels();\r\n        }\r\n\r\n        update()\r\n        {\r\n            if (this.game.input.activePointer.justPressed())\r\n            {\r\n                this.game.physics.arcade.moveToPointer(this.player, this.playerSpeed);\r\n            }\r\n            this.game.physics.arcade.collide(this.player, this.asteroids, this.hitAsteroid, null, this);\r\n            this.game.physics.arcade.overlap(this.player, this.collectables, this.collect, null, this);\r\n        }\r\n\r\n        generateAsteroids()\r\n        {\r\n            this.asteroids = this.game.add.group();\r\n\r\n            this.asteroids.enableBody = true;\r\n            this.asteroids.physicsBodyType = Phaser.Physics.ARCADE;\r\n\r\n            let numAsteroids: number = this.game.rnd.integerInRange(150, 200);\r\n            let asteroid: Phaser.Sprite;\r\n\r\n            for (let i: number = 0; i < numAsteroids; i++)\r\n            {\r\n                asteroid = this.asteroids.create(this.game.world.randomX, this.game.world.randomY, 'rock');\r\n                asteroid.scale.setTo(this.game.rnd.integerInRange(10, 40) / 10);\r\n                asteroid.body.velocity.x = this.game.rnd.integerInRange(-20, 20);\r\n                asteroid.body.velocity.y = this.game.rnd.integerInRange(-20, 20);\r\n                asteroid.body.immovable = true;\r\n                asteroid.body.collideWorldBounds = true;\r\n            }\r\n        }\r\n\r\n        hitAsteroid(player: Phaser.Sprite, asteroid: Phaser.Sprite)\r\n        {\r\n            this.game.input.enabled = false;\r\n            this.explosionSound.play();\r\n\r\n            let emitter: Phaser.Particles.Arcade.Emitter = this.game.add.emitter(this.player.x, this.player.y, 100);\r\n            emitter.makeParticles('playerParticle');\r\n            emitter.minParticleSpeed.setTo(-200, -200);\r\n            emitter.maxParticleSpeed.setTo(200, 200);\r\n            emitter.gravity = new Phaser.Point(0, 0);\r\n            emitter.start(true, 1000, null, 100);\r\n            player.kill();\r\n            asteroid.kill();\r\n\r\n            GameModule.SpaceHipster.highScore = Math.max(this.playerScore, GameModule.SpaceHipster.highScore);\r\n            this.game.time.events.add(1000, this.gameOver, this);\r\n        }\r\n\r\n        generateCollectibles()\r\n        {\r\n            this.collectables = this.game.add.group();\r\n            this.collectables.enableBody = true;\r\n            this.collectables.physicsBodyType = Phaser.Physics.ARCADE;\r\n\r\n            let numCollectibles: number = this.game.rnd.integerInRange(100, 150);\r\n            let collectable: Phaser.Sprite;\r\n\r\n            for (let i: number = 0; i < numCollectibles; i++)\r\n            {\r\n                collectable = this.collectables.create(this.game.world.randomX, this.game.world.randomY, 'power');\r\n                collectable.animations.add('fly', [0, 1, 2, 3], 5, true);\r\n                collectable.animations.play('fly');\r\n            }\r\n        }\r\n\r\n        collect(player: Phaser.Sprite, collectable: Phaser.Sprite)\r\n        {\r\n            this.collectSound.play();\r\n            this.playerScore++;\r\n            this.scoreLabel.text = \"Score: \" + this.playerScore;\r\n\r\n            collectable.kill();\r\n        }\r\n\r\n        showLabels()\r\n        {\r\n            let text = \"Score: 0\";\r\n            let style = {\r\n                font: \"20px Impact\",\r\n                fill: \"#fff\",\r\n                align: \"center\"\r\n            };\r\n            this.scoreLabel = this.game.add.text(50, 50, text, style);\r\n            this.scoreLabel.fixedToCamera = true;\r\n        }\r\n\r\n        gameOver()\r\n        {\r\n            this.game.state.start('MainMenu', true, false);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./libs/phaser.d.ts\" />\r\n\r\nexport namespace SpaceHipster\r\n{\r\n    export class Preload extends Phaser.State\r\n    {\r\n        public constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        splash: Phaser.Sprite;\r\n        preloadBar: Phaser.Sprite;\r\n\r\n        preload()\r\n        {\r\n            // Setting up the game loading screen\r\n            this.splash = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'logo');\r\n            this.splash.anchor.setTo(0.5);\r\n\r\n            this.preloadBar = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY + 128, 'preloadbar');\r\n            this.preloadBar.anchor.setTo(0.5);\r\n\r\n            this.game.load.setPreloadSprite(this.preloadBar);\r\n\r\n            // Pre-loading Assets now\r\n            this.game.load.image('space', './assets/images/space.png');\r\n            this.game.load.image('rock', './assets/images/rock.png');\r\n            this.game.load.image('playerParticle', './assets/images/player-particle.png');\r\n\r\n            this.game.load.spritesheet('playership', './assets/images/player.png', 12, 12);\r\n            this.game.load.spritesheet('power', './assets/images/power.png', 12, 12);\r\n\r\n            this.game.load.audio('collect', './assets/audio/collect.ogg');\r\n            this.game.load.audio('explosion', './assets/audio/explosion.ogg');\r\n        }\r\n\r\n        create()\r\n        {\r\n            this.game.state.start('MainMenu');\r\n        }\r\n    }\r\n}\r\n"]}