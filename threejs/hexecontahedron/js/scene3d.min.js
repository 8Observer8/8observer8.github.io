var renderer,scene,camera;var winWidth,winHeight;var loader,controls;var light,hex;var materialNames=[];function main(){init();render()}window.onload=main;function init(){winWidth=window.innerWidth;winHeight=window.innerHeight;var canvas=document.getElementById("renderCanvas");renderer=new THREE.WebGLRenderer({canvas:canvas});renderer.setSize(winWidth,winHeight);scene=new THREE.Scene;scene.background=new THREE.Color(3355443);scene.add(new THREE.AmbientLight(3355443));camera=new THREE.PerspectiveCamera(45,winWidth/winHeight,.1,1e3);camera.position.set(1,1,3);controls=new THREE.OrbitControls(camera);light=new THREE.HemisphereLight(16777147,526368,1);scene.add(light);light.position.copy(camera.position);controls.addEventListener("change",lightUpdate);window.addEventListener("resize",onWindowResize,false);loader=new THREE.JSONLoader;var modelPath="assets/models/Hexecontahedron.json";loader.load(modelPath,handleLoad);renderer.domElement.addEventListener("dblclick",ondblclick,false)}function ondblclick(event){x=event.clientX/window.innerWidth*2-1;y=-(event.clientY/window.innerHeight)*2+1;var dir=new THREE.Vector3(x,y,-1);dir.unproject(camera);var ray=new THREE.Raycaster(camera.position,dir.sub(camera.position).normalize());var intersects=ray.intersectObject(hex);if(intersects.length>0){var index=intersects[0].face.materialIndex;alert(materialNames[index])}}function handleLoad(geometry,materials){for(var i=1;i<materials.length;i++){materialNames[i]=materials[i].name}var texturePath="assets/textures/Hexecontahedron.png";var material=new THREE.MeshLambertMaterial({map:(new THREE.TextureLoader).load(texturePath)});hex=new THREE.Mesh(geometry,material);console.log(hex);console.log(materials);scene.add(hex)}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight)}function lightUpdate(){light.position.copy(camera.position)}function render(){requestAnimationFrame(render);controls.update();renderer.render(scene,camera)}