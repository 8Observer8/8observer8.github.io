/* jshint node: true */
/* global Shape: false, inheritPrototype: false */

"use strict";

function Circle(ctx, x, y, size, color) {
    Shape.call(this, ctx, x, y, size, color);
}
inheritPrototype(Circle, Shape);

Circle.prototype.Draw = function () {
    Shape.prototype.Draw.call(this);

    this._ctx.beginPath();
    this._ctx.arc(this._x, this._y, this._size, 0, 2 * Math.PI, false);
    this._ctx.closePath();
    
    this._ctx.fill();
};

Circle.prototype.IsCollision = function (x, y) {
    var dx = Math.abs(x - this._x);
    var dy = Math.abs(y - this._y);
    return Math.sqrt(dx * dx + dy * dy) < this._size;
};
/* jshint node: true */
/* global window: false, Scene: false */

"use strict";

function main() {
    Scene.Initialize("renderCanvas");
}
window.onload = main;
/* jshint node: true */
/* global document: false, window: false, Square: false, Triangle: false, Circle: false */

"use strict";

var Scene = (function() {
    var _canvas = null;
    var _ctx = null;
    var _backgroundColor = "white";
    var _radioSquare = null;
    var _radioTriangle = null;
    var _radioCircle = null;

    var _eShapeType = Object.freeze({
        eSquare: 0,
        eTriangle: 1,
        eCircle: 2
    });
    var _currentShape = _eShapeType.eSquare;

    var shapeArray = [];

    function Initialize(canvasID) {
        _canvas = document.getElementById(canvasID);
        _ctx = _canvas.getContext("2d");

        _radioSquare = document.getElementById("radioSquare");
        _radioTriangle = document.getElementById("radioTriangle");
        _radioCircle = document.getElementById("radioCircle");
        _radioSquare.onclick = function() {
            _currentShape = _eShapeType.eSquare;
        };
        _radioTriangle.onclick = function() {
            _currentShape = _eShapeType.eTriangle;
        };
        _radioCircle.onclick = function() {
            _currentShape = _eShapeType.eCircle;
        };

        var x, y, r, g, b, size;
        for (var i = 0; i < 2; i++) {
            x = _GetRandomInt(100, 300);
            y = _GetRandomInt(100, 300);
            r = _GetRandomInt(0, 255);
            g = _GetRandomInt(0, 255);
            b = _GetRandomInt(0, 255);
            size = _GetRandomInt(40, 80);
            var square = new Square(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
            shapeArray.push(square);

            x = _GetRandomInt(100, 300);
            y = _GetRandomInt(100, 300);
            r = _GetRandomInt(0, 255);
            g = _GetRandomInt(0, 255);
            b = _GetRandomInt(0, 255);
            size = _GetRandomInt(40, 80);
            var triangle = new Triangle(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
            shapeArray.push(triangle);

            x = _GetRandomInt(100, 300);
            y = _GetRandomInt(100, 300);
            r = _GetRandomInt(0, 255);
            g = _GetRandomInt(0, 255);
            b = _GetRandomInt(0, 255);
            size = _GetRandomInt(40, 80);
            var circle = new Circle(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
            shapeArray.push(circle);
        }

        // Handler for left and right mouse button click
        _canvas.onmousedown = function(evt) {
            var x = evt.clientX;
            var y = evt.clientY;
            var rect = evt.target.getBoundingClientRect();
            x = Math.floor(x - rect.left);
            y = Math.floor(y - rect.top);

            if (evt.button === 0) {
                _AddShape(x, y);
            } else if (evt.button === 2) {
                _DeleteShape(x, y);
            }
        };

        // Hide context menu by right mouse click
        window.oncontextmenu = function() {
            return false;
        };

        _Draw();
    }

    function _AddShape(x, y) {
        var r = _GetRandomInt(0, 255);
        var g = _GetRandomInt(0, 255);
        var b = _GetRandomInt(0, 255);
        var size = _GetRandomInt(40, 80);
        var shape;
        if (_currentShape === _eShapeType.eSquare) {
            shape = new Square(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
        } else if (_currentShape === _eShapeType.eTriangle) {
            shape = new Triangle(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
        } else if (_currentShape === _eShapeType.eCircle) {
            shape = new Circle(_ctx, x, y, size, 'rgba(' + r + ', ' + g + ', ' + b + ', 255)');
        }

        shapeArray.push(shape);
        _Draw();
    }

    function _DeleteShape(x, y) {
        for (var i = 0; i < shapeArray.length; i++) {
            if (shapeArray[i].IsCollision(x, y)) {
                shapeArray.splice(i, 1);
                i = -1;
            }
        }
        _Draw();
    }

    /**
     * Returns a random integer between min and max
     * Using Math.round() will give you a non-uniform distribution!
     */
    function _GetRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function _Draw() {
        _ctx.fillStyle = _backgroundColor;
        _ctx.fillRect(0, 0, _canvas.width, _canvas.height);

        for (var i = 0; i < shapeArray.length; i++) {
            shapeArray[i].Draw();
        }
    }

    return {
        Initialize: Initialize
    };
}());
/* jshint node: true */

"use strict";

function Shape(ctx, x, y, size, color) {
    this._ctx = ctx;
    this._x = x;
    this._y = y;
    this._size = size;
    this._color = color;
}

Shape.prototype.Draw = function() {
    this._ctx.fillStyle = this._color;
};

Shape.prototype.IsCollision = function(x, y) {

};

function inheritPrototype(subClass, superClass) {
    var prototype = Object.create(superClass.prototype);
    prototype.constructor = subClass;
    subClass = prototype;
}
/* jshint node: true */
/* global Shape: false, inheritPrototype: false */

"use strict";

function Square(ctx, x, y, size, color) {
    Shape.call(this, ctx, x, y, size, color);
}
inheritPrototype(Square, Shape);

Square.prototype.Draw = function() {
    Shape.prototype.Draw.call(this);
    this._ctx.fillRect(this._x - this._size / 2, this._y - this._size / 2, this._size, this._size);
};

Square.prototype.IsCollision = function(x, y) {
    return (this._x - this._size / 2 <= x && x <= this._x + this._size / 2 &&
        this._y - this._size / 2 <= y && y <= this._y + this._size / 2);
};
/* jshint node: true */
/* global Shape: false, inheritPrototype: false */

"use strict";

function Triangle(ctx, x, y, size, color) {
    Shape.call(this, ctx, x, y, size, color);
}
inheritPrototype(Triangle, Shape);

Triangle.prototype.Draw = function() {
    Shape.prototype.Draw.call(this);

    this._ctx.beginPath();
    this._ctx.moveTo(this._x, this._y - this._size);
    this._ctx.lineTo(this._x - this._size, this._y + this._size);
    this._ctx.lineTo(this._x + this._size, this._y + this._size);
    this._ctx.closePath();

    this._ctx.fill();
};

Triangle.prototype.IsCollision = function(x, y) {
    var Px = x;
    var Py = y;
    var Ax = this._x;
    var Ay = this._y - this._size;
    var Bx = this._x - this._size;
    var By = this._y + this._size;
    var Cx = this._x + this._size;
    var Cy = this._y + this._size;

    var N1 = (By - Ay) * (Px - Ax) - (Bx - Ax) * (Py - Ay);
    var N2 = (Cy - By) * (Px - Bx) - (Cx - Bx) * (Py - By);
    var N3 = (Ay - Cy) * (Px - Cx) - (Ax - Cx) * (Py - Cy);
    var result = ((N1 > 0) && (N2 > 0) && (N3 > 0)) || ((N1 < 0) && (N2 < 0) && (N3 < 0));
    return result;
};